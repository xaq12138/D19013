// mcu.v

// Generated using ACDS version 14.1 186 at 2015.09.22.13:56:31

`timescale 1 ps / 1 ps
module mcu (
		input  wire        clk_0,                         //                    clk_0_clk_in.clk
		input  wire        reset_n,                       //              clk_0_clk_in_reset.reset_n
		output wire [7:0]  out_port_from_the_pio_addr,    //    pio_addr_external_connection.export
		output wire        out_port_from_the_pio_clk,     //     pio_clk_external_connection.export
		output wire [7:0]  out_port_from_the_pio_ctr_out, // pio_ctr_out_external_connection.export
		output wire [31:0] out_port_from_the_pio_data,    //    pio_data_external_connection.export
		output wire        out_port_from_the_pio_reset,   //   pio_reset_external_connection.export
		output wire        out_port_from_the_pio_spi_clk, // pio_spi_clk_external_connection.export
		input  wire        in_port_to_the_pio_spi_di,     //  pio_spi_di_external_connection.export
		output wire        out_port_from_the_pio_spi_do,  //  pio_spi_do_external_connection.export
		output wire        out_port_from_the_pio_spi_le,  //  pio_spi_le_external_connection.export
		input  wire        rxd_to_the_uart_0,             //      uart_0_external_connection.rxd
		output wire        txd_from_the_uart_0,           //                                .txd
		input  wire        rxd_to_the_uart,               //        uart_external_connection.rxd
		output wire        txd_from_the_uart              //                                .txd
	);

	wire  [31:0] cpu_0_data_master_readdata;                                             // mm_interconnect_0:cpu_0_data_master_readdata -> cpu_0:d_readdata
	wire         cpu_0_data_master_waitrequest;                                          // mm_interconnect_0:cpu_0_data_master_waitrequest -> cpu_0:d_waitrequest
	wire         cpu_0_data_master_debugaccess;                                          // cpu_0:jtag_debug_module_debugaccess_to_roms -> mm_interconnect_0:cpu_0_data_master_debugaccess
	wire  [17:0] cpu_0_data_master_address;                                              // cpu_0:d_address -> mm_interconnect_0:cpu_0_data_master_address
	wire   [3:0] cpu_0_data_master_byteenable;                                           // cpu_0:d_byteenable -> mm_interconnect_0:cpu_0_data_master_byteenable
	wire         cpu_0_data_master_read;                                                 // cpu_0:d_read -> mm_interconnect_0:cpu_0_data_master_read
	wire         cpu_0_data_master_write;                                                // cpu_0:d_write -> mm_interconnect_0:cpu_0_data_master_write
	wire  [31:0] cpu_0_data_master_writedata;                                            // cpu_0:d_writedata -> mm_interconnect_0:cpu_0_data_master_writedata
	wire  [31:0] cpu_0_instruction_master_readdata;                                      // mm_interconnect_0:cpu_0_instruction_master_readdata -> cpu_0:i_readdata
	wire         cpu_0_instruction_master_waitrequest;                                   // mm_interconnect_0:cpu_0_instruction_master_waitrequest -> cpu_0:i_waitrequest
	wire  [17:0] cpu_0_instruction_master_address;                                       // cpu_0:i_address -> mm_interconnect_0:cpu_0_instruction_master_address
	wire         cpu_0_instruction_master_read;                                          // cpu_0:i_read -> mm_interconnect_0:cpu_0_instruction_master_read
	wire         cpu_0_instruction_master_readdatavalid;                                 // mm_interconnect_0:cpu_0_instruction_master_readdatavalid -> cpu_0:i_readdatavalid
	wire         mm_interconnect_0_epcs_flash_controller_0_epcs_control_port_chipselect; // mm_interconnect_0:epcs_flash_controller_0_epcs_control_port_chipselect -> epcs_flash_controller_0:chipselect
	wire  [31:0] mm_interconnect_0_epcs_flash_controller_0_epcs_control_port_readdata;   // epcs_flash_controller_0:readdata -> mm_interconnect_0:epcs_flash_controller_0_epcs_control_port_readdata
	wire   [8:0] mm_interconnect_0_epcs_flash_controller_0_epcs_control_port_address;    // mm_interconnect_0:epcs_flash_controller_0_epcs_control_port_address -> epcs_flash_controller_0:address
	wire         mm_interconnect_0_epcs_flash_controller_0_epcs_control_port_read;       // mm_interconnect_0:epcs_flash_controller_0_epcs_control_port_read -> epcs_flash_controller_0:read_n
	wire         mm_interconnect_0_epcs_flash_controller_0_epcs_control_port_write;      // mm_interconnect_0:epcs_flash_controller_0_epcs_control_port_write -> epcs_flash_controller_0:write_n
	wire  [31:0] mm_interconnect_0_epcs_flash_controller_0_epcs_control_port_writedata;  // mm_interconnect_0:epcs_flash_controller_0_epcs_control_port_writedata -> epcs_flash_controller_0:writedata
	wire  [31:0] mm_interconnect_0_cpu_0_jtag_debug_module_readdata;                     // cpu_0:jtag_debug_module_readdata -> mm_interconnect_0:cpu_0_jtag_debug_module_readdata
	wire         mm_interconnect_0_cpu_0_jtag_debug_module_waitrequest;                  // cpu_0:jtag_debug_module_waitrequest -> mm_interconnect_0:cpu_0_jtag_debug_module_waitrequest
	wire         mm_interconnect_0_cpu_0_jtag_debug_module_debugaccess;                  // mm_interconnect_0:cpu_0_jtag_debug_module_debugaccess -> cpu_0:jtag_debug_module_debugaccess
	wire   [8:0] mm_interconnect_0_cpu_0_jtag_debug_module_address;                      // mm_interconnect_0:cpu_0_jtag_debug_module_address -> cpu_0:jtag_debug_module_address
	wire         mm_interconnect_0_cpu_0_jtag_debug_module_read;                         // mm_interconnect_0:cpu_0_jtag_debug_module_read -> cpu_0:jtag_debug_module_read
	wire   [3:0] mm_interconnect_0_cpu_0_jtag_debug_module_byteenable;                   // mm_interconnect_0:cpu_0_jtag_debug_module_byteenable -> cpu_0:jtag_debug_module_byteenable
	wire         mm_interconnect_0_cpu_0_jtag_debug_module_write;                        // mm_interconnect_0:cpu_0_jtag_debug_module_write -> cpu_0:jtag_debug_module_write
	wire  [31:0] mm_interconnect_0_cpu_0_jtag_debug_module_writedata;                    // mm_interconnect_0:cpu_0_jtag_debug_module_writedata -> cpu_0:jtag_debug_module_writedata
	wire         mm_interconnect_0_onchip_memory2_0_s1_chipselect;                       // mm_interconnect_0:onchip_memory2_0_s1_chipselect -> onchip_memory2_0:chipselect
	wire  [31:0] mm_interconnect_0_onchip_memory2_0_s1_readdata;                         // onchip_memory2_0:readdata -> mm_interconnect_0:onchip_memory2_0_s1_readdata
	wire  [13:0] mm_interconnect_0_onchip_memory2_0_s1_address;                          // mm_interconnect_0:onchip_memory2_0_s1_address -> onchip_memory2_0:address
	wire   [3:0] mm_interconnect_0_onchip_memory2_0_s1_byteenable;                       // mm_interconnect_0:onchip_memory2_0_s1_byteenable -> onchip_memory2_0:byteenable
	wire         mm_interconnect_0_onchip_memory2_0_s1_write;                            // mm_interconnect_0:onchip_memory2_0_s1_write -> onchip_memory2_0:write
	wire  [31:0] mm_interconnect_0_onchip_memory2_0_s1_writedata;                        // mm_interconnect_0:onchip_memory2_0_s1_writedata -> onchip_memory2_0:writedata
	wire         mm_interconnect_0_onchip_memory2_0_s1_clken;                            // mm_interconnect_0:onchip_memory2_0_s1_clken -> onchip_memory2_0:clken
	wire         mm_interconnect_0_uart_s1_chipselect;                                   // mm_interconnect_0:uart_s1_chipselect -> uart:chipselect
	wire  [15:0] mm_interconnect_0_uart_s1_readdata;                                     // uart:readdata -> mm_interconnect_0:uart_s1_readdata
	wire   [2:0] mm_interconnect_0_uart_s1_address;                                      // mm_interconnect_0:uart_s1_address -> uart:address
	wire         mm_interconnect_0_uart_s1_read;                                         // mm_interconnect_0:uart_s1_read -> uart:read_n
	wire         mm_interconnect_0_uart_s1_begintransfer;                                // mm_interconnect_0:uart_s1_begintransfer -> uart:begintransfer
	wire         mm_interconnect_0_uart_s1_write;                                        // mm_interconnect_0:uart_s1_write -> uart:write_n
	wire  [15:0] mm_interconnect_0_uart_s1_writedata;                                    // mm_interconnect_0:uart_s1_writedata -> uart:writedata
	wire         mm_interconnect_0_pio_addr_s1_chipselect;                               // mm_interconnect_0:pio_addr_s1_chipselect -> pio_addr:chipselect
	wire  [31:0] mm_interconnect_0_pio_addr_s1_readdata;                                 // pio_addr:readdata -> mm_interconnect_0:pio_addr_s1_readdata
	wire   [1:0] mm_interconnect_0_pio_addr_s1_address;                                  // mm_interconnect_0:pio_addr_s1_address -> pio_addr:address
	wire         mm_interconnect_0_pio_addr_s1_write;                                    // mm_interconnect_0:pio_addr_s1_write -> pio_addr:write_n
	wire  [31:0] mm_interconnect_0_pio_addr_s1_writedata;                                // mm_interconnect_0:pio_addr_s1_writedata -> pio_addr:writedata
	wire         mm_interconnect_0_pio_data_s1_chipselect;                               // mm_interconnect_0:pio_data_s1_chipselect -> pio_data:chipselect
	wire  [31:0] mm_interconnect_0_pio_data_s1_readdata;                                 // pio_data:readdata -> mm_interconnect_0:pio_data_s1_readdata
	wire   [1:0] mm_interconnect_0_pio_data_s1_address;                                  // mm_interconnect_0:pio_data_s1_address -> pio_data:address
	wire         mm_interconnect_0_pio_data_s1_write;                                    // mm_interconnect_0:pio_data_s1_write -> pio_data:write_n
	wire  [31:0] mm_interconnect_0_pio_data_s1_writedata;                                // mm_interconnect_0:pio_data_s1_writedata -> pio_data:writedata
	wire         mm_interconnect_0_pio_clk_s1_chipselect;                                // mm_interconnect_0:pio_clk_s1_chipselect -> pio_clk:chipselect
	wire  [31:0] mm_interconnect_0_pio_clk_s1_readdata;                                  // pio_clk:readdata -> mm_interconnect_0:pio_clk_s1_readdata
	wire   [1:0] mm_interconnect_0_pio_clk_s1_address;                                   // mm_interconnect_0:pio_clk_s1_address -> pio_clk:address
	wire         mm_interconnect_0_pio_clk_s1_write;                                     // mm_interconnect_0:pio_clk_s1_write -> pio_clk:write_n
	wire  [31:0] mm_interconnect_0_pio_clk_s1_writedata;                                 // mm_interconnect_0:pio_clk_s1_writedata -> pio_clk:writedata
	wire         mm_interconnect_0_pio_ctr_out_s1_chipselect;                            // mm_interconnect_0:pio_ctr_out_s1_chipselect -> pio_ctr_out:chipselect
	wire  [31:0] mm_interconnect_0_pio_ctr_out_s1_readdata;                              // pio_ctr_out:readdata -> mm_interconnect_0:pio_ctr_out_s1_readdata
	wire   [1:0] mm_interconnect_0_pio_ctr_out_s1_address;                               // mm_interconnect_0:pio_ctr_out_s1_address -> pio_ctr_out:address
	wire         mm_interconnect_0_pio_ctr_out_s1_write;                                 // mm_interconnect_0:pio_ctr_out_s1_write -> pio_ctr_out:write_n
	wire  [31:0] mm_interconnect_0_pio_ctr_out_s1_writedata;                             // mm_interconnect_0:pio_ctr_out_s1_writedata -> pio_ctr_out:writedata
	wire         mm_interconnect_0_pio_reset_s1_chipselect;                              // mm_interconnect_0:pio_reset_s1_chipselect -> pio_reset:chipselect
	wire  [31:0] mm_interconnect_0_pio_reset_s1_readdata;                                // pio_reset:readdata -> mm_interconnect_0:pio_reset_s1_readdata
	wire   [1:0] mm_interconnect_0_pio_reset_s1_address;                                 // mm_interconnect_0:pio_reset_s1_address -> pio_reset:address
	wire         mm_interconnect_0_pio_reset_s1_write;                                   // mm_interconnect_0:pio_reset_s1_write -> pio_reset:write_n
	wire  [31:0] mm_interconnect_0_pio_reset_s1_writedata;                               // mm_interconnect_0:pio_reset_s1_writedata -> pio_reset:writedata
	wire         mm_interconnect_0_pio_spi_clk_s1_chipselect;                            // mm_interconnect_0:pio_spi_clk_s1_chipselect -> pio_spi_clk:chipselect
	wire  [31:0] mm_interconnect_0_pio_spi_clk_s1_readdata;                              // pio_spi_clk:readdata -> mm_interconnect_0:pio_spi_clk_s1_readdata
	wire   [1:0] mm_interconnect_0_pio_spi_clk_s1_address;                               // mm_interconnect_0:pio_spi_clk_s1_address -> pio_spi_clk:address
	wire         mm_interconnect_0_pio_spi_clk_s1_write;                                 // mm_interconnect_0:pio_spi_clk_s1_write -> pio_spi_clk:write_n
	wire  [31:0] mm_interconnect_0_pio_spi_clk_s1_writedata;                             // mm_interconnect_0:pio_spi_clk_s1_writedata -> pio_spi_clk:writedata
	wire  [31:0] mm_interconnect_0_pio_spi_di_s1_readdata;                               // pio_spi_di:readdata -> mm_interconnect_0:pio_spi_di_s1_readdata
	wire   [1:0] mm_interconnect_0_pio_spi_di_s1_address;                                // mm_interconnect_0:pio_spi_di_s1_address -> pio_spi_di:address
	wire         mm_interconnect_0_pio_spi_do_s1_chipselect;                             // mm_interconnect_0:pio_spi_do_s1_chipselect -> pio_spi_do:chipselect
	wire  [31:0] mm_interconnect_0_pio_spi_do_s1_readdata;                               // pio_spi_do:readdata -> mm_interconnect_0:pio_spi_do_s1_readdata
	wire   [1:0] mm_interconnect_0_pio_spi_do_s1_address;                                // mm_interconnect_0:pio_spi_do_s1_address -> pio_spi_do:address
	wire         mm_interconnect_0_pio_spi_do_s1_write;                                  // mm_interconnect_0:pio_spi_do_s1_write -> pio_spi_do:write_n
	wire  [31:0] mm_interconnect_0_pio_spi_do_s1_writedata;                              // mm_interconnect_0:pio_spi_do_s1_writedata -> pio_spi_do:writedata
	wire         mm_interconnect_0_pio_spi_le_s1_chipselect;                             // mm_interconnect_0:pio_spi_le_s1_chipselect -> pio_spi_le:chipselect
	wire  [31:0] mm_interconnect_0_pio_spi_le_s1_readdata;                               // pio_spi_le:readdata -> mm_interconnect_0:pio_spi_le_s1_readdata
	wire   [1:0] mm_interconnect_0_pio_spi_le_s1_address;                                // mm_interconnect_0:pio_spi_le_s1_address -> pio_spi_le:address
	wire         mm_interconnect_0_pio_spi_le_s1_write;                                  // mm_interconnect_0:pio_spi_le_s1_write -> pio_spi_le:write_n
	wire  [31:0] mm_interconnect_0_pio_spi_le_s1_writedata;                              // mm_interconnect_0:pio_spi_le_s1_writedata -> pio_spi_le:writedata
	wire         mm_interconnect_0_uart_0_s1_chipselect;                                 // mm_interconnect_0:uart_0_s1_chipselect -> uart_0:chipselect
	wire  [15:0] mm_interconnect_0_uart_0_s1_readdata;                                   // uart_0:readdata -> mm_interconnect_0:uart_0_s1_readdata
	wire   [2:0] mm_interconnect_0_uart_0_s1_address;                                    // mm_interconnect_0:uart_0_s1_address -> uart_0:address
	wire         mm_interconnect_0_uart_0_s1_read;                                       // mm_interconnect_0:uart_0_s1_read -> uart_0:read_n
	wire         mm_interconnect_0_uart_0_s1_begintransfer;                              // mm_interconnect_0:uart_0_s1_begintransfer -> uart_0:begintransfer
	wire         mm_interconnect_0_uart_0_s1_write;                                      // mm_interconnect_0:uart_0_s1_write -> uart_0:write_n
	wire  [15:0] mm_interconnect_0_uart_0_s1_writedata;                                  // mm_interconnect_0:uart_0_s1_writedata -> uart_0:writedata
	wire         irq_mapper_receiver0_irq;                                               // uart:irq -> irq_mapper:receiver0_irq
	wire         irq_mapper_receiver1_irq;                                               // epcs_flash_controller_0:irq -> irq_mapper:receiver1_irq
	wire         irq_mapper_receiver2_irq;                                               // uart_0:irq -> irq_mapper:receiver2_irq
	wire  [31:0] cpu_0_d_irq_irq;                                                        // irq_mapper:sender_irq -> cpu_0:d_irq
	wire         rst_controller_reset_out_reset;                                         // rst_controller:reset_out -> [cpu_0:reset_n, epcs_flash_controller_0:reset_n, irq_mapper:reset, mm_interconnect_0:cpu_0_reset_n_reset_bridge_in_reset_reset, onchip_memory2_0:reset, pio_addr:reset_n, pio_clk:reset_n, pio_ctr_out:reset_n, pio_data:reset_n, pio_reset:reset_n, pio_spi_clk:reset_n, pio_spi_di:reset_n, pio_spi_do:reset_n, pio_spi_le:reset_n, rst_translator:in_reset, uart:reset_n, uart_0:reset_n]
	wire         rst_controller_reset_out_reset_req;                                     // rst_controller:reset_req -> [cpu_0:reset_req, epcs_flash_controller_0:reset_req, onchip_memory2_0:reset_req, rst_translator:reset_req_in]
	wire         cpu_0_jtag_debug_module_reset_reset;                                    // cpu_0:jtag_debug_module_resetrequest -> rst_controller:reset_in1

	mcu_cpu_0 cpu_0 (
		.clk                                   (clk_0),                                                 //                       clk.clk
		.reset_n                               (~rst_controller_reset_out_reset),                       //                   reset_n.reset_n
		.reset_req                             (rst_controller_reset_out_reset_req),                    //                          .reset_req
		.d_address                             (cpu_0_data_master_address),                             //               data_master.address
		.d_byteenable                          (cpu_0_data_master_byteenable),                          //                          .byteenable
		.d_read                                (cpu_0_data_master_read),                                //                          .read
		.d_readdata                            (cpu_0_data_master_readdata),                            //                          .readdata
		.d_waitrequest                         (cpu_0_data_master_waitrequest),                         //                          .waitrequest
		.d_write                               (cpu_0_data_master_write),                               //                          .write
		.d_writedata                           (cpu_0_data_master_writedata),                           //                          .writedata
		.jtag_debug_module_debugaccess_to_roms (cpu_0_data_master_debugaccess),                         //                          .debugaccess
		.i_address                             (cpu_0_instruction_master_address),                      //        instruction_master.address
		.i_read                                (cpu_0_instruction_master_read),                         //                          .read
		.i_readdata                            (cpu_0_instruction_master_readdata),                     //                          .readdata
		.i_waitrequest                         (cpu_0_instruction_master_waitrequest),                  //                          .waitrequest
		.i_readdatavalid                       (cpu_0_instruction_master_readdatavalid),                //                          .readdatavalid
		.d_irq                                 (cpu_0_d_irq_irq),                                       //                     d_irq.irq
		.jtag_debug_module_resetrequest        (cpu_0_jtag_debug_module_reset_reset),                   //   jtag_debug_module_reset.reset
		.jtag_debug_module_address             (mm_interconnect_0_cpu_0_jtag_debug_module_address),     //         jtag_debug_module.address
		.jtag_debug_module_byteenable          (mm_interconnect_0_cpu_0_jtag_debug_module_byteenable),  //                          .byteenable
		.jtag_debug_module_debugaccess         (mm_interconnect_0_cpu_0_jtag_debug_module_debugaccess), //                          .debugaccess
		.jtag_debug_module_read                (mm_interconnect_0_cpu_0_jtag_debug_module_read),        //                          .read
		.jtag_debug_module_readdata            (mm_interconnect_0_cpu_0_jtag_debug_module_readdata),    //                          .readdata
		.jtag_debug_module_waitrequest         (mm_interconnect_0_cpu_0_jtag_debug_module_waitrequest), //                          .waitrequest
		.jtag_debug_module_write               (mm_interconnect_0_cpu_0_jtag_debug_module_write),       //                          .write
		.jtag_debug_module_writedata           (mm_interconnect_0_cpu_0_jtag_debug_module_writedata),   //                          .writedata
		.no_ci_readra                          ()                                                       // custom_instruction_master.readra
	);

	mcu_epcs_flash_controller_0 epcs_flash_controller_0 (
		.clk           (clk_0),                                                                  //               clk.clk
		.reset_n       (~rst_controller_reset_out_reset),                                        //             reset.reset_n
		.reset_req     (rst_controller_reset_out_reset_req),                                     //                  .reset_req
		.address       (mm_interconnect_0_epcs_flash_controller_0_epcs_control_port_address),    // epcs_control_port.address
		.chipselect    (mm_interconnect_0_epcs_flash_controller_0_epcs_control_port_chipselect), //                  .chipselect
		.dataavailable (),                                                                       //                  .dataavailable
		.endofpacket   (),                                                                       //                  .endofpacket
		.read_n        (~mm_interconnect_0_epcs_flash_controller_0_epcs_control_port_read),      //                  .read_n
		.readdata      (mm_interconnect_0_epcs_flash_controller_0_epcs_control_port_readdata),   //                  .readdata
		.readyfordata  (),                                                                       //                  .readyfordata
		.write_n       (~mm_interconnect_0_epcs_flash_controller_0_epcs_control_port_write),     //                  .write_n
		.writedata     (mm_interconnect_0_epcs_flash_controller_0_epcs_control_port_writedata),  //                  .writedata
		.irq           (irq_mapper_receiver1_irq)                                                //               irq.irq
	);

	mcu_onchip_memory2_0 onchip_memory2_0 (
		.clk        (clk_0),                                            //   clk1.clk
		.address    (mm_interconnect_0_onchip_memory2_0_s1_address),    //     s1.address
		.clken      (mm_interconnect_0_onchip_memory2_0_s1_clken),      //       .clken
		.chipselect (mm_interconnect_0_onchip_memory2_0_s1_chipselect), //       .chipselect
		.write      (mm_interconnect_0_onchip_memory2_0_s1_write),      //       .write
		.readdata   (mm_interconnect_0_onchip_memory2_0_s1_readdata),   //       .readdata
		.writedata  (mm_interconnect_0_onchip_memory2_0_s1_writedata),  //       .writedata
		.byteenable (mm_interconnect_0_onchip_memory2_0_s1_byteenable), //       .byteenable
		.reset      (rst_controller_reset_out_reset),                   // reset1.reset
		.reset_req  (rst_controller_reset_out_reset_req)                //       .reset_req
	);

	mcu_pio_addr pio_addr (
		.clk        (clk_0),                                    //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),          //               reset.reset_n
		.address    (mm_interconnect_0_pio_addr_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_pio_addr_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_pio_addr_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_pio_addr_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_pio_addr_s1_readdata),   //                    .readdata
		.out_port   (out_port_from_the_pio_addr)                // external_connection.export
	);

	mcu_pio_clk pio_clk (
		.clk        (clk_0),                                   //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),         //               reset.reset_n
		.address    (mm_interconnect_0_pio_clk_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_pio_clk_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_pio_clk_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_pio_clk_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_pio_clk_s1_readdata),   //                    .readdata
		.out_port   (out_port_from_the_pio_clk)                // external_connection.export
	);

	mcu_pio_addr pio_ctr_out (
		.clk        (clk_0),                                       //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),             //               reset.reset_n
		.address    (mm_interconnect_0_pio_ctr_out_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_pio_ctr_out_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_pio_ctr_out_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_pio_ctr_out_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_pio_ctr_out_s1_readdata),   //                    .readdata
		.out_port   (out_port_from_the_pio_ctr_out)                // external_connection.export
	);

	mcu_pio_data pio_data (
		.clk        (clk_0),                                    //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),          //               reset.reset_n
		.address    (mm_interconnect_0_pio_data_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_pio_data_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_pio_data_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_pio_data_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_pio_data_s1_readdata),   //                    .readdata
		.out_port   (out_port_from_the_pio_data)                // external_connection.export
	);

	mcu_pio_clk pio_reset (
		.clk        (clk_0),                                     //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),           //               reset.reset_n
		.address    (mm_interconnect_0_pio_reset_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_pio_reset_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_pio_reset_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_pio_reset_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_pio_reset_s1_readdata),   //                    .readdata
		.out_port   (out_port_from_the_pio_reset)                // external_connection.export
	);

	mcu_pio_clk pio_spi_clk (
		.clk        (clk_0),                                       //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),             //               reset.reset_n
		.address    (mm_interconnect_0_pio_spi_clk_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_pio_spi_clk_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_pio_spi_clk_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_pio_spi_clk_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_pio_spi_clk_s1_readdata),   //                    .readdata
		.out_port   (out_port_from_the_pio_spi_clk)                // external_connection.export
	);

	mcu_pio_spi_di pio_spi_di (
		.clk      (clk_0),                                    //                 clk.clk
		.reset_n  (~rst_controller_reset_out_reset),          //               reset.reset_n
		.address  (mm_interconnect_0_pio_spi_di_s1_address),  //                  s1.address
		.readdata (mm_interconnect_0_pio_spi_di_s1_readdata), //                    .readdata
		.in_port  (in_port_to_the_pio_spi_di)                 // external_connection.export
	);

	mcu_pio_clk pio_spi_do (
		.clk        (clk_0),                                      //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),            //               reset.reset_n
		.address    (mm_interconnect_0_pio_spi_do_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_pio_spi_do_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_pio_spi_do_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_pio_spi_do_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_pio_spi_do_s1_readdata),   //                    .readdata
		.out_port   (out_port_from_the_pio_spi_do)                // external_connection.export
	);

	mcu_pio_clk pio_spi_le (
		.clk        (clk_0),                                      //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),            //               reset.reset_n
		.address    (mm_interconnect_0_pio_spi_le_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_pio_spi_le_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_pio_spi_le_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_pio_spi_le_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_pio_spi_le_s1_readdata),   //                    .readdata
		.out_port   (out_port_from_the_pio_spi_le)                // external_connection.export
	);

	mcu_uart uart (
		.clk           (clk_0),                                   //                 clk.clk
		.reset_n       (~rst_controller_reset_out_reset),         //               reset.reset_n
		.address       (mm_interconnect_0_uart_s1_address),       //                  s1.address
		.begintransfer (mm_interconnect_0_uart_s1_begintransfer), //                    .begintransfer
		.chipselect    (mm_interconnect_0_uart_s1_chipselect),    //                    .chipselect
		.read_n        (~mm_interconnect_0_uart_s1_read),         //                    .read_n
		.write_n       (~mm_interconnect_0_uart_s1_write),        //                    .write_n
		.writedata     (mm_interconnect_0_uart_s1_writedata),     //                    .writedata
		.readdata      (mm_interconnect_0_uart_s1_readdata),      //                    .readdata
		.dataavailable (),                                        //                    .dataavailable
		.readyfordata  (),                                        //                    .readyfordata
		.rxd           (rxd_to_the_uart),                         // external_connection.export
		.txd           (txd_from_the_uart),                       //                    .export
		.irq           (irq_mapper_receiver0_irq)                 //                 irq.irq
	);

	mcu_uart_0 uart_0 (
		.clk           (clk_0),                                     //                 clk.clk
		.reset_n       (~rst_controller_reset_out_reset),           //               reset.reset_n
		.address       (mm_interconnect_0_uart_0_s1_address),       //                  s1.address
		.begintransfer (mm_interconnect_0_uart_0_s1_begintransfer), //                    .begintransfer
		.chipselect    (mm_interconnect_0_uart_0_s1_chipselect),    //                    .chipselect
		.read_n        (~mm_interconnect_0_uart_0_s1_read),         //                    .read_n
		.write_n       (~mm_interconnect_0_uart_0_s1_write),        //                    .write_n
		.writedata     (mm_interconnect_0_uart_0_s1_writedata),     //                    .writedata
		.readdata      (mm_interconnect_0_uart_0_s1_readdata),      //                    .readdata
		.dataavailable (),                                          //                    .dataavailable
		.readyfordata  (),                                          //                    .readyfordata
		.rxd           (rxd_to_the_uart_0),                         // external_connection.export
		.txd           (txd_from_the_uart_0),                       //                    .export
		.irq           (irq_mapper_receiver2_irq)                   //                 irq.irq
	);

	mcu_mm_interconnect_0 mm_interconnect_0 (
		.clk_0_clk_clk                                        (clk_0),                                                                  //                                 clk_0_clk.clk
		.cpu_0_reset_n_reset_bridge_in_reset_reset            (rst_controller_reset_out_reset),                                         //       cpu_0_reset_n_reset_bridge_in_reset.reset
		.cpu_0_data_master_address                            (cpu_0_data_master_address),                                              //                         cpu_0_data_master.address
		.cpu_0_data_master_waitrequest                        (cpu_0_data_master_waitrequest),                                          //                                          .waitrequest
		.cpu_0_data_master_byteenable                         (cpu_0_data_master_byteenable),                                           //                                          .byteenable
		.cpu_0_data_master_read                               (cpu_0_data_master_read),                                                 //                                          .read
		.cpu_0_data_master_readdata                           (cpu_0_data_master_readdata),                                             //                                          .readdata
		.cpu_0_data_master_write                              (cpu_0_data_master_write),                                                //                                          .write
		.cpu_0_data_master_writedata                          (cpu_0_data_master_writedata),                                            //                                          .writedata
		.cpu_0_data_master_debugaccess                        (cpu_0_data_master_debugaccess),                                          //                                          .debugaccess
		.cpu_0_instruction_master_address                     (cpu_0_instruction_master_address),                                       //                  cpu_0_instruction_master.address
		.cpu_0_instruction_master_waitrequest                 (cpu_0_instruction_master_waitrequest),                                   //                                          .waitrequest
		.cpu_0_instruction_master_read                        (cpu_0_instruction_master_read),                                          //                                          .read
		.cpu_0_instruction_master_readdata                    (cpu_0_instruction_master_readdata),                                      //                                          .readdata
		.cpu_0_instruction_master_readdatavalid               (cpu_0_instruction_master_readdatavalid),                                 //                                          .readdatavalid
		.cpu_0_jtag_debug_module_address                      (mm_interconnect_0_cpu_0_jtag_debug_module_address),                      //                   cpu_0_jtag_debug_module.address
		.cpu_0_jtag_debug_module_write                        (mm_interconnect_0_cpu_0_jtag_debug_module_write),                        //                                          .write
		.cpu_0_jtag_debug_module_read                         (mm_interconnect_0_cpu_0_jtag_debug_module_read),                         //                                          .read
		.cpu_0_jtag_debug_module_readdata                     (mm_interconnect_0_cpu_0_jtag_debug_module_readdata),                     //                                          .readdata
		.cpu_0_jtag_debug_module_writedata                    (mm_interconnect_0_cpu_0_jtag_debug_module_writedata),                    //                                          .writedata
		.cpu_0_jtag_debug_module_byteenable                   (mm_interconnect_0_cpu_0_jtag_debug_module_byteenable),                   //                                          .byteenable
		.cpu_0_jtag_debug_module_waitrequest                  (mm_interconnect_0_cpu_0_jtag_debug_module_waitrequest),                  //                                          .waitrequest
		.cpu_0_jtag_debug_module_debugaccess                  (mm_interconnect_0_cpu_0_jtag_debug_module_debugaccess),                  //                                          .debugaccess
		.epcs_flash_controller_0_epcs_control_port_address    (mm_interconnect_0_epcs_flash_controller_0_epcs_control_port_address),    // epcs_flash_controller_0_epcs_control_port.address
		.epcs_flash_controller_0_epcs_control_port_write      (mm_interconnect_0_epcs_flash_controller_0_epcs_control_port_write),      //                                          .write
		.epcs_flash_controller_0_epcs_control_port_read       (mm_interconnect_0_epcs_flash_controller_0_epcs_control_port_read),       //                                          .read
		.epcs_flash_controller_0_epcs_control_port_readdata   (mm_interconnect_0_epcs_flash_controller_0_epcs_control_port_readdata),   //                                          .readdata
		.epcs_flash_controller_0_epcs_control_port_writedata  (mm_interconnect_0_epcs_flash_controller_0_epcs_control_port_writedata),  //                                          .writedata
		.epcs_flash_controller_0_epcs_control_port_chipselect (mm_interconnect_0_epcs_flash_controller_0_epcs_control_port_chipselect), //                                          .chipselect
		.onchip_memory2_0_s1_address                          (mm_interconnect_0_onchip_memory2_0_s1_address),                          //                       onchip_memory2_0_s1.address
		.onchip_memory2_0_s1_write                            (mm_interconnect_0_onchip_memory2_0_s1_write),                            //                                          .write
		.onchip_memory2_0_s1_readdata                         (mm_interconnect_0_onchip_memory2_0_s1_readdata),                         //                                          .readdata
		.onchip_memory2_0_s1_writedata                        (mm_interconnect_0_onchip_memory2_0_s1_writedata),                        //                                          .writedata
		.onchip_memory2_0_s1_byteenable                       (mm_interconnect_0_onchip_memory2_0_s1_byteenable),                       //                                          .byteenable
		.onchip_memory2_0_s1_chipselect                       (mm_interconnect_0_onchip_memory2_0_s1_chipselect),                       //                                          .chipselect
		.onchip_memory2_0_s1_clken                            (mm_interconnect_0_onchip_memory2_0_s1_clken),                            //                                          .clken
		.pio_addr_s1_address                                  (mm_interconnect_0_pio_addr_s1_address),                                  //                               pio_addr_s1.address
		.pio_addr_s1_write                                    (mm_interconnect_0_pio_addr_s1_write),                                    //                                          .write
		.pio_addr_s1_readdata                                 (mm_interconnect_0_pio_addr_s1_readdata),                                 //                                          .readdata
		.pio_addr_s1_writedata                                (mm_interconnect_0_pio_addr_s1_writedata),                                //                                          .writedata
		.pio_addr_s1_chipselect                               (mm_interconnect_0_pio_addr_s1_chipselect),                               //                                          .chipselect
		.pio_clk_s1_address                                   (mm_interconnect_0_pio_clk_s1_address),                                   //                                pio_clk_s1.address
		.pio_clk_s1_write                                     (mm_interconnect_0_pio_clk_s1_write),                                     //                                          .write
		.pio_clk_s1_readdata                                  (mm_interconnect_0_pio_clk_s1_readdata),                                  //                                          .readdata
		.pio_clk_s1_writedata                                 (mm_interconnect_0_pio_clk_s1_writedata),                                 //                                          .writedata
		.pio_clk_s1_chipselect                                (mm_interconnect_0_pio_clk_s1_chipselect),                                //                                          .chipselect
		.pio_ctr_out_s1_address                               (mm_interconnect_0_pio_ctr_out_s1_address),                               //                            pio_ctr_out_s1.address
		.pio_ctr_out_s1_write                                 (mm_interconnect_0_pio_ctr_out_s1_write),                                 //                                          .write
		.pio_ctr_out_s1_readdata                              (mm_interconnect_0_pio_ctr_out_s1_readdata),                              //                                          .readdata
		.pio_ctr_out_s1_writedata                             (mm_interconnect_0_pio_ctr_out_s1_writedata),                             //                                          .writedata
		.pio_ctr_out_s1_chipselect                            (mm_interconnect_0_pio_ctr_out_s1_chipselect),                            //                                          .chipselect
		.pio_data_s1_address                                  (mm_interconnect_0_pio_data_s1_address),                                  //                               pio_data_s1.address
		.pio_data_s1_write                                    (mm_interconnect_0_pio_data_s1_write),                                    //                                          .write
		.pio_data_s1_readdata                                 (mm_interconnect_0_pio_data_s1_readdata),                                 //                                          .readdata
		.pio_data_s1_writedata                                (mm_interconnect_0_pio_data_s1_writedata),                                //                                          .writedata
		.pio_data_s1_chipselect                               (mm_interconnect_0_pio_data_s1_chipselect),                               //                                          .chipselect
		.pio_reset_s1_address                                 (mm_interconnect_0_pio_reset_s1_address),                                 //                              pio_reset_s1.address
		.pio_reset_s1_write                                   (mm_interconnect_0_pio_reset_s1_write),                                   //                                          .write
		.pio_reset_s1_readdata                                (mm_interconnect_0_pio_reset_s1_readdata),                                //                                          .readdata
		.pio_reset_s1_writedata                               (mm_interconnect_0_pio_reset_s1_writedata),                               //                                          .writedata
		.pio_reset_s1_chipselect                              (mm_interconnect_0_pio_reset_s1_chipselect),                              //                                          .chipselect
		.pio_spi_clk_s1_address                               (mm_interconnect_0_pio_spi_clk_s1_address),                               //                            pio_spi_clk_s1.address
		.pio_spi_clk_s1_write                                 (mm_interconnect_0_pio_spi_clk_s1_write),                                 //                                          .write
		.pio_spi_clk_s1_readdata                              (mm_interconnect_0_pio_spi_clk_s1_readdata),                              //                                          .readdata
		.pio_spi_clk_s1_writedata                             (mm_interconnect_0_pio_spi_clk_s1_writedata),                             //                                          .writedata
		.pio_spi_clk_s1_chipselect                            (mm_interconnect_0_pio_spi_clk_s1_chipselect),                            //                                          .chipselect
		.pio_spi_di_s1_address                                (mm_interconnect_0_pio_spi_di_s1_address),                                //                             pio_spi_di_s1.address
		.pio_spi_di_s1_readdata                               (mm_interconnect_0_pio_spi_di_s1_readdata),                               //                                          .readdata
		.pio_spi_do_s1_address                                (mm_interconnect_0_pio_spi_do_s1_address),                                //                             pio_spi_do_s1.address
		.pio_spi_do_s1_write                                  (mm_interconnect_0_pio_spi_do_s1_write),                                  //                                          .write
		.pio_spi_do_s1_readdata                               (mm_interconnect_0_pio_spi_do_s1_readdata),                               //                                          .readdata
		.pio_spi_do_s1_writedata                              (mm_interconnect_0_pio_spi_do_s1_writedata),                              //                                          .writedata
		.pio_spi_do_s1_chipselect                             (mm_interconnect_0_pio_spi_do_s1_chipselect),                             //                                          .chipselect
		.pio_spi_le_s1_address                                (mm_interconnect_0_pio_spi_le_s1_address),                                //                             pio_spi_le_s1.address
		.pio_spi_le_s1_write                                  (mm_interconnect_0_pio_spi_le_s1_write),                                  //                                          .write
		.pio_spi_le_s1_readdata                               (mm_interconnect_0_pio_spi_le_s1_readdata),                               //                                          .readdata
		.pio_spi_le_s1_writedata                              (mm_interconnect_0_pio_spi_le_s1_writedata),                              //                                          .writedata
		.pio_spi_le_s1_chipselect                             (mm_interconnect_0_pio_spi_le_s1_chipselect),                             //                                          .chipselect
		.uart_s1_address                                      (mm_interconnect_0_uart_s1_address),                                      //                                   uart_s1.address
		.uart_s1_write                                        (mm_interconnect_0_uart_s1_write),                                        //                                          .write
		.uart_s1_read                                         (mm_interconnect_0_uart_s1_read),                                         //                                          .read
		.uart_s1_readdata                                     (mm_interconnect_0_uart_s1_readdata),                                     //                                          .readdata
		.uart_s1_writedata                                    (mm_interconnect_0_uart_s1_writedata),                                    //                                          .writedata
		.uart_s1_begintransfer                                (mm_interconnect_0_uart_s1_begintransfer),                                //                                          .begintransfer
		.uart_s1_chipselect                                   (mm_interconnect_0_uart_s1_chipselect),                                   //                                          .chipselect
		.uart_0_s1_address                                    (mm_interconnect_0_uart_0_s1_address),                                    //                                 uart_0_s1.address
		.uart_0_s1_write                                      (mm_interconnect_0_uart_0_s1_write),                                      //                                          .write
		.uart_0_s1_read                                       (mm_interconnect_0_uart_0_s1_read),                                       //                                          .read
		.uart_0_s1_readdata                                   (mm_interconnect_0_uart_0_s1_readdata),                                   //                                          .readdata
		.uart_0_s1_writedata                                  (mm_interconnect_0_uart_0_s1_writedata),                                  //                                          .writedata
		.uart_0_s1_begintransfer                              (mm_interconnect_0_uart_0_s1_begintransfer),                              //                                          .begintransfer
		.uart_0_s1_chipselect                                 (mm_interconnect_0_uart_0_s1_chipselect)                                  //                                          .chipselect
	);

	mcu_irq_mapper irq_mapper (
		.clk           (clk_0),                          //       clk.clk
		.reset         (rst_controller_reset_out_reset), // clk_reset.reset
		.receiver0_irq (irq_mapper_receiver0_irq),       // receiver0.irq
		.receiver1_irq (irq_mapper_receiver1_irq),       // receiver1.irq
		.receiver2_irq (irq_mapper_receiver2_irq),       // receiver2.irq
		.sender_irq    (cpu_0_d_irq_irq)                 //    sender.irq
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_n),                            // reset_in0.reset
		.reset_in1      (cpu_0_jtag_debug_module_reset_reset), // reset_in1.reset
		.clk            (clk_0),                               //       clk.clk
		.reset_out      (rst_controller_reset_out_reset),      // reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req),  //          .reset_req
		.reset_req_in0  (1'b0),                                // (terminated)
		.reset_req_in1  (1'b0),                                // (terminated)
		.reset_in2      (1'b0),                                // (terminated)
		.reset_req_in2  (1'b0),                                // (terminated)
		.reset_in3      (1'b0),                                // (terminated)
		.reset_req_in3  (1'b0),                                // (terminated)
		.reset_in4      (1'b0),                                // (terminated)
		.reset_req_in4  (1'b0),                                // (terminated)
		.reset_in5      (1'b0),                                // (terminated)
		.reset_req_in5  (1'b0),                                // (terminated)
		.reset_in6      (1'b0),                                // (terminated)
		.reset_req_in6  (1'b0),                                // (terminated)
		.reset_in7      (1'b0),                                // (terminated)
		.reset_req_in7  (1'b0),                                // (terminated)
		.reset_in8      (1'b0),                                // (terminated)
		.reset_req_in8  (1'b0),                                // (terminated)
		.reset_in9      (1'b0),                                // (terminated)
		.reset_req_in9  (1'b0),                                // (terminated)
		.reset_in10     (1'b0),                                // (terminated)
		.reset_req_in10 (1'b0),                                // (terminated)
		.reset_in11     (1'b0),                                // (terminated)
		.reset_req_in11 (1'b0),                                // (terminated)
		.reset_in12     (1'b0),                                // (terminated)
		.reset_req_in12 (1'b0),                                // (terminated)
		.reset_in13     (1'b0),                                // (terminated)
		.reset_req_in13 (1'b0),                                // (terminated)
		.reset_in14     (1'b0),                                // (terminated)
		.reset_req_in14 (1'b0),                                // (terminated)
		.reset_in15     (1'b0),                                // (terminated)
		.reset_req_in15 (1'b0)                                 // (terminated)
	);

endmodule
