// mcu_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.1 186 at 2015.09.22.13:57:08

`timescale 1 ps / 1 ps
module mcu_mm_interconnect_0 (
		input  wire        clk_0_clk_clk,                                        //                                 clk_0_clk.clk
		input  wire        cpu_0_reset_n_reset_bridge_in_reset_reset,            //       cpu_0_reset_n_reset_bridge_in_reset.reset
		input  wire [17:0] cpu_0_data_master_address,                            //                         cpu_0_data_master.address
		output wire        cpu_0_data_master_waitrequest,                        //                                          .waitrequest
		input  wire [3:0]  cpu_0_data_master_byteenable,                         //                                          .byteenable
		input  wire        cpu_0_data_master_read,                               //                                          .read
		output wire [31:0] cpu_0_data_master_readdata,                           //                                          .readdata
		input  wire        cpu_0_data_master_write,                              //                                          .write
		input  wire [31:0] cpu_0_data_master_writedata,                          //                                          .writedata
		input  wire        cpu_0_data_master_debugaccess,                        //                                          .debugaccess
		input  wire [17:0] cpu_0_instruction_master_address,                     //                  cpu_0_instruction_master.address
		output wire        cpu_0_instruction_master_waitrequest,                 //                                          .waitrequest
		input  wire        cpu_0_instruction_master_read,                        //                                          .read
		output wire [31:0] cpu_0_instruction_master_readdata,                    //                                          .readdata
		output wire        cpu_0_instruction_master_readdatavalid,               //                                          .readdatavalid
		output wire [8:0]  cpu_0_jtag_debug_module_address,                      //                   cpu_0_jtag_debug_module.address
		output wire        cpu_0_jtag_debug_module_write,                        //                                          .write
		output wire        cpu_0_jtag_debug_module_read,                         //                                          .read
		input  wire [31:0] cpu_0_jtag_debug_module_readdata,                     //                                          .readdata
		output wire [31:0] cpu_0_jtag_debug_module_writedata,                    //                                          .writedata
		output wire [3:0]  cpu_0_jtag_debug_module_byteenable,                   //                                          .byteenable
		input  wire        cpu_0_jtag_debug_module_waitrequest,                  //                                          .waitrequest
		output wire        cpu_0_jtag_debug_module_debugaccess,                  //                                          .debugaccess
		output wire [8:0]  epcs_flash_controller_0_epcs_control_port_address,    // epcs_flash_controller_0_epcs_control_port.address
		output wire        epcs_flash_controller_0_epcs_control_port_write,      //                                          .write
		output wire        epcs_flash_controller_0_epcs_control_port_read,       //                                          .read
		input  wire [31:0] epcs_flash_controller_0_epcs_control_port_readdata,   //                                          .readdata
		output wire [31:0] epcs_flash_controller_0_epcs_control_port_writedata,  //                                          .writedata
		output wire        epcs_flash_controller_0_epcs_control_port_chipselect, //                                          .chipselect
		output wire [13:0] onchip_memory2_0_s1_address,                          //                       onchip_memory2_0_s1.address
		output wire        onchip_memory2_0_s1_write,                            //                                          .write
		input  wire [31:0] onchip_memory2_0_s1_readdata,                         //                                          .readdata
		output wire [31:0] onchip_memory2_0_s1_writedata,                        //                                          .writedata
		output wire [3:0]  onchip_memory2_0_s1_byteenable,                       //                                          .byteenable
		output wire        onchip_memory2_0_s1_chipselect,                       //                                          .chipselect
		output wire        onchip_memory2_0_s1_clken,                            //                                          .clken
		output wire [1:0]  pio_addr_s1_address,                                  //                               pio_addr_s1.address
		output wire        pio_addr_s1_write,                                    //                                          .write
		input  wire [31:0] pio_addr_s1_readdata,                                 //                                          .readdata
		output wire [31:0] pio_addr_s1_writedata,                                //                                          .writedata
		output wire        pio_addr_s1_chipselect,                               //                                          .chipselect
		output wire [1:0]  pio_clk_s1_address,                                   //                                pio_clk_s1.address
		output wire        pio_clk_s1_write,                                     //                                          .write
		input  wire [31:0] pio_clk_s1_readdata,                                  //                                          .readdata
		output wire [31:0] pio_clk_s1_writedata,                                 //                                          .writedata
		output wire        pio_clk_s1_chipselect,                                //                                          .chipselect
		output wire [1:0]  pio_ctr_out_s1_address,                               //                            pio_ctr_out_s1.address
		output wire        pio_ctr_out_s1_write,                                 //                                          .write
		input  wire [31:0] pio_ctr_out_s1_readdata,                              //                                          .readdata
		output wire [31:0] pio_ctr_out_s1_writedata,                             //                                          .writedata
		output wire        pio_ctr_out_s1_chipselect,                            //                                          .chipselect
		output wire [1:0]  pio_data_s1_address,                                  //                               pio_data_s1.address
		output wire        pio_data_s1_write,                                    //                                          .write
		input  wire [31:0] pio_data_s1_readdata,                                 //                                          .readdata
		output wire [31:0] pio_data_s1_writedata,                                //                                          .writedata
		output wire        pio_data_s1_chipselect,                               //                                          .chipselect
		output wire [1:0]  pio_reset_s1_address,                                 //                              pio_reset_s1.address
		output wire        pio_reset_s1_write,                                   //                                          .write
		input  wire [31:0] pio_reset_s1_readdata,                                //                                          .readdata
		output wire [31:0] pio_reset_s1_writedata,                               //                                          .writedata
		output wire        pio_reset_s1_chipselect,                              //                                          .chipselect
		output wire [1:0]  pio_spi_clk_s1_address,                               //                            pio_spi_clk_s1.address
		output wire        pio_spi_clk_s1_write,                                 //                                          .write
		input  wire [31:0] pio_spi_clk_s1_readdata,                              //                                          .readdata
		output wire [31:0] pio_spi_clk_s1_writedata,                             //                                          .writedata
		output wire        pio_spi_clk_s1_chipselect,                            //                                          .chipselect
		output wire [1:0]  pio_spi_di_s1_address,                                //                             pio_spi_di_s1.address
		input  wire [31:0] pio_spi_di_s1_readdata,                               //                                          .readdata
		output wire [1:0]  pio_spi_do_s1_address,                                //                             pio_spi_do_s1.address
		output wire        pio_spi_do_s1_write,                                  //                                          .write
		input  wire [31:0] pio_spi_do_s1_readdata,                               //                                          .readdata
		output wire [31:0] pio_spi_do_s1_writedata,                              //                                          .writedata
		output wire        pio_spi_do_s1_chipselect,                             //                                          .chipselect
		output wire [1:0]  pio_spi_le_s1_address,                                //                             pio_spi_le_s1.address
		output wire        pio_spi_le_s1_write,                                  //                                          .write
		input  wire [31:0] pio_spi_le_s1_readdata,                               //                                          .readdata
		output wire [31:0] pio_spi_le_s1_writedata,                              //                                          .writedata
		output wire        pio_spi_le_s1_chipselect,                             //                                          .chipselect
		output wire [2:0]  uart_s1_address,                                      //                                   uart_s1.address
		output wire        uart_s1_write,                                        //                                          .write
		output wire        uart_s1_read,                                         //                                          .read
		input  wire [15:0] uart_s1_readdata,                                     //                                          .readdata
		output wire [15:0] uart_s1_writedata,                                    //                                          .writedata
		output wire        uart_s1_begintransfer,                                //                                          .begintransfer
		output wire        uart_s1_chipselect,                                   //                                          .chipselect
		output wire [2:0]  uart_0_s1_address,                                    //                                 uart_0_s1.address
		output wire        uart_0_s1_write,                                      //                                          .write
		output wire        uart_0_s1_read,                                       //                                          .read
		input  wire [15:0] uart_0_s1_readdata,                                   //                                          .readdata
		output wire [15:0] uart_0_s1_writedata,                                  //                                          .writedata
		output wire        uart_0_s1_begintransfer,                              //                                          .begintransfer
		output wire        uart_0_s1_chipselect                                  //                                          .chipselect
	);

	wire         cpu_0_data_master_translator_avalon_universal_master_0_waitrequest;          // cpu_0_data_master_agent:av_waitrequest -> cpu_0_data_master_translator:uav_waitrequest
	wire  [31:0] cpu_0_data_master_translator_avalon_universal_master_0_readdata;             // cpu_0_data_master_agent:av_readdata -> cpu_0_data_master_translator:uav_readdata
	wire         cpu_0_data_master_translator_avalon_universal_master_0_debugaccess;          // cpu_0_data_master_translator:uav_debugaccess -> cpu_0_data_master_agent:av_debugaccess
	wire  [17:0] cpu_0_data_master_translator_avalon_universal_master_0_address;              // cpu_0_data_master_translator:uav_address -> cpu_0_data_master_agent:av_address
	wire         cpu_0_data_master_translator_avalon_universal_master_0_read;                 // cpu_0_data_master_translator:uav_read -> cpu_0_data_master_agent:av_read
	wire   [3:0] cpu_0_data_master_translator_avalon_universal_master_0_byteenable;           // cpu_0_data_master_translator:uav_byteenable -> cpu_0_data_master_agent:av_byteenable
	wire         cpu_0_data_master_translator_avalon_universal_master_0_readdatavalid;        // cpu_0_data_master_agent:av_readdatavalid -> cpu_0_data_master_translator:uav_readdatavalid
	wire         cpu_0_data_master_translator_avalon_universal_master_0_lock;                 // cpu_0_data_master_translator:uav_lock -> cpu_0_data_master_agent:av_lock
	wire         cpu_0_data_master_translator_avalon_universal_master_0_write;                // cpu_0_data_master_translator:uav_write -> cpu_0_data_master_agent:av_write
	wire  [31:0] cpu_0_data_master_translator_avalon_universal_master_0_writedata;            // cpu_0_data_master_translator:uav_writedata -> cpu_0_data_master_agent:av_writedata
	wire   [2:0] cpu_0_data_master_translator_avalon_universal_master_0_burstcount;           // cpu_0_data_master_translator:uav_burstcount -> cpu_0_data_master_agent:av_burstcount
	wire         rsp_mux_src_valid;                                                           // rsp_mux:src_valid -> cpu_0_data_master_agent:rp_valid
	wire  [95:0] rsp_mux_src_data;                                                            // rsp_mux:src_data -> cpu_0_data_master_agent:rp_data
	wire         rsp_mux_src_ready;                                                           // cpu_0_data_master_agent:rp_ready -> rsp_mux:src_ready
	wire  [13:0] rsp_mux_src_channel;                                                         // rsp_mux:src_channel -> cpu_0_data_master_agent:rp_channel
	wire         rsp_mux_src_startofpacket;                                                   // rsp_mux:src_startofpacket -> cpu_0_data_master_agent:rp_startofpacket
	wire         rsp_mux_src_endofpacket;                                                     // rsp_mux:src_endofpacket -> cpu_0_data_master_agent:rp_endofpacket
	wire         cpu_0_instruction_master_translator_avalon_universal_master_0_waitrequest;   // cpu_0_instruction_master_agent:av_waitrequest -> cpu_0_instruction_master_translator:uav_waitrequest
	wire  [31:0] cpu_0_instruction_master_translator_avalon_universal_master_0_readdata;      // cpu_0_instruction_master_agent:av_readdata -> cpu_0_instruction_master_translator:uav_readdata
	wire         cpu_0_instruction_master_translator_avalon_universal_master_0_debugaccess;   // cpu_0_instruction_master_translator:uav_debugaccess -> cpu_0_instruction_master_agent:av_debugaccess
	wire  [17:0] cpu_0_instruction_master_translator_avalon_universal_master_0_address;       // cpu_0_instruction_master_translator:uav_address -> cpu_0_instruction_master_agent:av_address
	wire         cpu_0_instruction_master_translator_avalon_universal_master_0_read;          // cpu_0_instruction_master_translator:uav_read -> cpu_0_instruction_master_agent:av_read
	wire   [3:0] cpu_0_instruction_master_translator_avalon_universal_master_0_byteenable;    // cpu_0_instruction_master_translator:uav_byteenable -> cpu_0_instruction_master_agent:av_byteenable
	wire         cpu_0_instruction_master_translator_avalon_universal_master_0_readdatavalid; // cpu_0_instruction_master_agent:av_readdatavalid -> cpu_0_instruction_master_translator:uav_readdatavalid
	wire         cpu_0_instruction_master_translator_avalon_universal_master_0_lock;          // cpu_0_instruction_master_translator:uav_lock -> cpu_0_instruction_master_agent:av_lock
	wire         cpu_0_instruction_master_translator_avalon_universal_master_0_write;         // cpu_0_instruction_master_translator:uav_write -> cpu_0_instruction_master_agent:av_write
	wire  [31:0] cpu_0_instruction_master_translator_avalon_universal_master_0_writedata;     // cpu_0_instruction_master_translator:uav_writedata -> cpu_0_instruction_master_agent:av_writedata
	wire   [2:0] cpu_0_instruction_master_translator_avalon_universal_master_0_burstcount;    // cpu_0_instruction_master_translator:uav_burstcount -> cpu_0_instruction_master_agent:av_burstcount
	wire  [31:0] epcs_flash_controller_0_epcs_control_port_agent_m0_readdata;                 // epcs_flash_controller_0_epcs_control_port_translator:uav_readdata -> epcs_flash_controller_0_epcs_control_port_agent:m0_readdata
	wire         epcs_flash_controller_0_epcs_control_port_agent_m0_waitrequest;              // epcs_flash_controller_0_epcs_control_port_translator:uav_waitrequest -> epcs_flash_controller_0_epcs_control_port_agent:m0_waitrequest
	wire         epcs_flash_controller_0_epcs_control_port_agent_m0_debugaccess;              // epcs_flash_controller_0_epcs_control_port_agent:m0_debugaccess -> epcs_flash_controller_0_epcs_control_port_translator:uav_debugaccess
	wire  [17:0] epcs_flash_controller_0_epcs_control_port_agent_m0_address;                  // epcs_flash_controller_0_epcs_control_port_agent:m0_address -> epcs_flash_controller_0_epcs_control_port_translator:uav_address
	wire   [3:0] epcs_flash_controller_0_epcs_control_port_agent_m0_byteenable;               // epcs_flash_controller_0_epcs_control_port_agent:m0_byteenable -> epcs_flash_controller_0_epcs_control_port_translator:uav_byteenable
	wire         epcs_flash_controller_0_epcs_control_port_agent_m0_read;                     // epcs_flash_controller_0_epcs_control_port_agent:m0_read -> epcs_flash_controller_0_epcs_control_port_translator:uav_read
	wire         epcs_flash_controller_0_epcs_control_port_agent_m0_readdatavalid;            // epcs_flash_controller_0_epcs_control_port_translator:uav_readdatavalid -> epcs_flash_controller_0_epcs_control_port_agent:m0_readdatavalid
	wire         epcs_flash_controller_0_epcs_control_port_agent_m0_lock;                     // epcs_flash_controller_0_epcs_control_port_agent:m0_lock -> epcs_flash_controller_0_epcs_control_port_translator:uav_lock
	wire  [31:0] epcs_flash_controller_0_epcs_control_port_agent_m0_writedata;                // epcs_flash_controller_0_epcs_control_port_agent:m0_writedata -> epcs_flash_controller_0_epcs_control_port_translator:uav_writedata
	wire         epcs_flash_controller_0_epcs_control_port_agent_m0_write;                    // epcs_flash_controller_0_epcs_control_port_agent:m0_write -> epcs_flash_controller_0_epcs_control_port_translator:uav_write
	wire   [2:0] epcs_flash_controller_0_epcs_control_port_agent_m0_burstcount;               // epcs_flash_controller_0_epcs_control_port_agent:m0_burstcount -> epcs_flash_controller_0_epcs_control_port_translator:uav_burstcount
	wire         epcs_flash_controller_0_epcs_control_port_agent_rf_source_valid;             // epcs_flash_controller_0_epcs_control_port_agent:rf_source_valid -> epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo:in_valid
	wire  [96:0] epcs_flash_controller_0_epcs_control_port_agent_rf_source_data;              // epcs_flash_controller_0_epcs_control_port_agent:rf_source_data -> epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo:in_data
	wire         epcs_flash_controller_0_epcs_control_port_agent_rf_source_ready;             // epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo:in_ready -> epcs_flash_controller_0_epcs_control_port_agent:rf_source_ready
	wire         epcs_flash_controller_0_epcs_control_port_agent_rf_source_startofpacket;     // epcs_flash_controller_0_epcs_control_port_agent:rf_source_startofpacket -> epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo:in_startofpacket
	wire         epcs_flash_controller_0_epcs_control_port_agent_rf_source_endofpacket;       // epcs_flash_controller_0_epcs_control_port_agent:rf_source_endofpacket -> epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo:in_endofpacket
	wire         epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo_out_valid;          // epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo:out_valid -> epcs_flash_controller_0_epcs_control_port_agent:rf_sink_valid
	wire  [96:0] epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo_out_data;           // epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo:out_data -> epcs_flash_controller_0_epcs_control_port_agent:rf_sink_data
	wire         epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo_out_ready;          // epcs_flash_controller_0_epcs_control_port_agent:rf_sink_ready -> epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo:out_ready
	wire         epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo_out_startofpacket;  // epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo:out_startofpacket -> epcs_flash_controller_0_epcs_control_port_agent:rf_sink_startofpacket
	wire         epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo_out_endofpacket;    // epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo:out_endofpacket -> epcs_flash_controller_0_epcs_control_port_agent:rf_sink_endofpacket
	wire         epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo_src_valid;        // epcs_flash_controller_0_epcs_control_port_agent:rdata_fifo_src_valid -> epcs_flash_controller_0_epcs_control_port_agent:rdata_fifo_sink_valid
	wire  [33:0] epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo_src_data;         // epcs_flash_controller_0_epcs_control_port_agent:rdata_fifo_src_data -> epcs_flash_controller_0_epcs_control_port_agent:rdata_fifo_sink_data
	wire         epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo_src_ready;        // epcs_flash_controller_0_epcs_control_port_agent:rdata_fifo_sink_ready -> epcs_flash_controller_0_epcs_control_port_agent:rdata_fifo_src_ready
	wire         cmd_mux_src_valid;                                                           // cmd_mux:src_valid -> epcs_flash_controller_0_epcs_control_port_agent:cp_valid
	wire  [95:0] cmd_mux_src_data;                                                            // cmd_mux:src_data -> epcs_flash_controller_0_epcs_control_port_agent:cp_data
	wire         cmd_mux_src_ready;                                                           // epcs_flash_controller_0_epcs_control_port_agent:cp_ready -> cmd_mux:src_ready
	wire  [13:0] cmd_mux_src_channel;                                                         // cmd_mux:src_channel -> epcs_flash_controller_0_epcs_control_port_agent:cp_channel
	wire         cmd_mux_src_startofpacket;                                                   // cmd_mux:src_startofpacket -> epcs_flash_controller_0_epcs_control_port_agent:cp_startofpacket
	wire         cmd_mux_src_endofpacket;                                                     // cmd_mux:src_endofpacket -> epcs_flash_controller_0_epcs_control_port_agent:cp_endofpacket
	wire  [31:0] cpu_0_jtag_debug_module_agent_m0_readdata;                                   // cpu_0_jtag_debug_module_translator:uav_readdata -> cpu_0_jtag_debug_module_agent:m0_readdata
	wire         cpu_0_jtag_debug_module_agent_m0_waitrequest;                                // cpu_0_jtag_debug_module_translator:uav_waitrequest -> cpu_0_jtag_debug_module_agent:m0_waitrequest
	wire         cpu_0_jtag_debug_module_agent_m0_debugaccess;                                // cpu_0_jtag_debug_module_agent:m0_debugaccess -> cpu_0_jtag_debug_module_translator:uav_debugaccess
	wire  [17:0] cpu_0_jtag_debug_module_agent_m0_address;                                    // cpu_0_jtag_debug_module_agent:m0_address -> cpu_0_jtag_debug_module_translator:uav_address
	wire   [3:0] cpu_0_jtag_debug_module_agent_m0_byteenable;                                 // cpu_0_jtag_debug_module_agent:m0_byteenable -> cpu_0_jtag_debug_module_translator:uav_byteenable
	wire         cpu_0_jtag_debug_module_agent_m0_read;                                       // cpu_0_jtag_debug_module_agent:m0_read -> cpu_0_jtag_debug_module_translator:uav_read
	wire         cpu_0_jtag_debug_module_agent_m0_readdatavalid;                              // cpu_0_jtag_debug_module_translator:uav_readdatavalid -> cpu_0_jtag_debug_module_agent:m0_readdatavalid
	wire         cpu_0_jtag_debug_module_agent_m0_lock;                                       // cpu_0_jtag_debug_module_agent:m0_lock -> cpu_0_jtag_debug_module_translator:uav_lock
	wire  [31:0] cpu_0_jtag_debug_module_agent_m0_writedata;                                  // cpu_0_jtag_debug_module_agent:m0_writedata -> cpu_0_jtag_debug_module_translator:uav_writedata
	wire         cpu_0_jtag_debug_module_agent_m0_write;                                      // cpu_0_jtag_debug_module_agent:m0_write -> cpu_0_jtag_debug_module_translator:uav_write
	wire   [2:0] cpu_0_jtag_debug_module_agent_m0_burstcount;                                 // cpu_0_jtag_debug_module_agent:m0_burstcount -> cpu_0_jtag_debug_module_translator:uav_burstcount
	wire         cpu_0_jtag_debug_module_agent_rf_source_valid;                               // cpu_0_jtag_debug_module_agent:rf_source_valid -> cpu_0_jtag_debug_module_agent_rsp_fifo:in_valid
	wire  [96:0] cpu_0_jtag_debug_module_agent_rf_source_data;                                // cpu_0_jtag_debug_module_agent:rf_source_data -> cpu_0_jtag_debug_module_agent_rsp_fifo:in_data
	wire         cpu_0_jtag_debug_module_agent_rf_source_ready;                               // cpu_0_jtag_debug_module_agent_rsp_fifo:in_ready -> cpu_0_jtag_debug_module_agent:rf_source_ready
	wire         cpu_0_jtag_debug_module_agent_rf_source_startofpacket;                       // cpu_0_jtag_debug_module_agent:rf_source_startofpacket -> cpu_0_jtag_debug_module_agent_rsp_fifo:in_startofpacket
	wire         cpu_0_jtag_debug_module_agent_rf_source_endofpacket;                         // cpu_0_jtag_debug_module_agent:rf_source_endofpacket -> cpu_0_jtag_debug_module_agent_rsp_fifo:in_endofpacket
	wire         cpu_0_jtag_debug_module_agent_rsp_fifo_out_valid;                            // cpu_0_jtag_debug_module_agent_rsp_fifo:out_valid -> cpu_0_jtag_debug_module_agent:rf_sink_valid
	wire  [96:0] cpu_0_jtag_debug_module_agent_rsp_fifo_out_data;                             // cpu_0_jtag_debug_module_agent_rsp_fifo:out_data -> cpu_0_jtag_debug_module_agent:rf_sink_data
	wire         cpu_0_jtag_debug_module_agent_rsp_fifo_out_ready;                            // cpu_0_jtag_debug_module_agent:rf_sink_ready -> cpu_0_jtag_debug_module_agent_rsp_fifo:out_ready
	wire         cpu_0_jtag_debug_module_agent_rsp_fifo_out_startofpacket;                    // cpu_0_jtag_debug_module_agent_rsp_fifo:out_startofpacket -> cpu_0_jtag_debug_module_agent:rf_sink_startofpacket
	wire         cpu_0_jtag_debug_module_agent_rsp_fifo_out_endofpacket;                      // cpu_0_jtag_debug_module_agent_rsp_fifo:out_endofpacket -> cpu_0_jtag_debug_module_agent:rf_sink_endofpacket
	wire         cpu_0_jtag_debug_module_agent_rdata_fifo_src_valid;                          // cpu_0_jtag_debug_module_agent:rdata_fifo_src_valid -> cpu_0_jtag_debug_module_agent:rdata_fifo_sink_valid
	wire  [33:0] cpu_0_jtag_debug_module_agent_rdata_fifo_src_data;                           // cpu_0_jtag_debug_module_agent:rdata_fifo_src_data -> cpu_0_jtag_debug_module_agent:rdata_fifo_sink_data
	wire         cpu_0_jtag_debug_module_agent_rdata_fifo_src_ready;                          // cpu_0_jtag_debug_module_agent:rdata_fifo_sink_ready -> cpu_0_jtag_debug_module_agent:rdata_fifo_src_ready
	wire         cmd_mux_001_src_valid;                                                       // cmd_mux_001:src_valid -> cpu_0_jtag_debug_module_agent:cp_valid
	wire  [95:0] cmd_mux_001_src_data;                                                        // cmd_mux_001:src_data -> cpu_0_jtag_debug_module_agent:cp_data
	wire         cmd_mux_001_src_ready;                                                       // cpu_0_jtag_debug_module_agent:cp_ready -> cmd_mux_001:src_ready
	wire  [13:0] cmd_mux_001_src_channel;                                                     // cmd_mux_001:src_channel -> cpu_0_jtag_debug_module_agent:cp_channel
	wire         cmd_mux_001_src_startofpacket;                                               // cmd_mux_001:src_startofpacket -> cpu_0_jtag_debug_module_agent:cp_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                                 // cmd_mux_001:src_endofpacket -> cpu_0_jtag_debug_module_agent:cp_endofpacket
	wire  [31:0] onchip_memory2_0_s1_agent_m0_readdata;                                       // onchip_memory2_0_s1_translator:uav_readdata -> onchip_memory2_0_s1_agent:m0_readdata
	wire         onchip_memory2_0_s1_agent_m0_waitrequest;                                    // onchip_memory2_0_s1_translator:uav_waitrequest -> onchip_memory2_0_s1_agent:m0_waitrequest
	wire         onchip_memory2_0_s1_agent_m0_debugaccess;                                    // onchip_memory2_0_s1_agent:m0_debugaccess -> onchip_memory2_0_s1_translator:uav_debugaccess
	wire  [17:0] onchip_memory2_0_s1_agent_m0_address;                                        // onchip_memory2_0_s1_agent:m0_address -> onchip_memory2_0_s1_translator:uav_address
	wire   [3:0] onchip_memory2_0_s1_agent_m0_byteenable;                                     // onchip_memory2_0_s1_agent:m0_byteenable -> onchip_memory2_0_s1_translator:uav_byteenable
	wire         onchip_memory2_0_s1_agent_m0_read;                                           // onchip_memory2_0_s1_agent:m0_read -> onchip_memory2_0_s1_translator:uav_read
	wire         onchip_memory2_0_s1_agent_m0_readdatavalid;                                  // onchip_memory2_0_s1_translator:uav_readdatavalid -> onchip_memory2_0_s1_agent:m0_readdatavalid
	wire         onchip_memory2_0_s1_agent_m0_lock;                                           // onchip_memory2_0_s1_agent:m0_lock -> onchip_memory2_0_s1_translator:uav_lock
	wire  [31:0] onchip_memory2_0_s1_agent_m0_writedata;                                      // onchip_memory2_0_s1_agent:m0_writedata -> onchip_memory2_0_s1_translator:uav_writedata
	wire         onchip_memory2_0_s1_agent_m0_write;                                          // onchip_memory2_0_s1_agent:m0_write -> onchip_memory2_0_s1_translator:uav_write
	wire   [2:0] onchip_memory2_0_s1_agent_m0_burstcount;                                     // onchip_memory2_0_s1_agent:m0_burstcount -> onchip_memory2_0_s1_translator:uav_burstcount
	wire         onchip_memory2_0_s1_agent_rf_source_valid;                                   // onchip_memory2_0_s1_agent:rf_source_valid -> onchip_memory2_0_s1_agent_rsp_fifo:in_valid
	wire  [96:0] onchip_memory2_0_s1_agent_rf_source_data;                                    // onchip_memory2_0_s1_agent:rf_source_data -> onchip_memory2_0_s1_agent_rsp_fifo:in_data
	wire         onchip_memory2_0_s1_agent_rf_source_ready;                                   // onchip_memory2_0_s1_agent_rsp_fifo:in_ready -> onchip_memory2_0_s1_agent:rf_source_ready
	wire         onchip_memory2_0_s1_agent_rf_source_startofpacket;                           // onchip_memory2_0_s1_agent:rf_source_startofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_startofpacket
	wire         onchip_memory2_0_s1_agent_rf_source_endofpacket;                             // onchip_memory2_0_s1_agent:rf_source_endofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_endofpacket
	wire         onchip_memory2_0_s1_agent_rsp_fifo_out_valid;                                // onchip_memory2_0_s1_agent_rsp_fifo:out_valid -> onchip_memory2_0_s1_agent:rf_sink_valid
	wire  [96:0] onchip_memory2_0_s1_agent_rsp_fifo_out_data;                                 // onchip_memory2_0_s1_agent_rsp_fifo:out_data -> onchip_memory2_0_s1_agent:rf_sink_data
	wire         onchip_memory2_0_s1_agent_rsp_fifo_out_ready;                                // onchip_memory2_0_s1_agent:rf_sink_ready -> onchip_memory2_0_s1_agent_rsp_fifo:out_ready
	wire         onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket;                        // onchip_memory2_0_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s1_agent:rf_sink_startofpacket
	wire         onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket;                          // onchip_memory2_0_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s1_agent:rf_sink_endofpacket
	wire         onchip_memory2_0_s1_agent_rdata_fifo_src_valid;                              // onchip_memory2_0_s1_agent:rdata_fifo_src_valid -> onchip_memory2_0_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] onchip_memory2_0_s1_agent_rdata_fifo_src_data;                               // onchip_memory2_0_s1_agent:rdata_fifo_src_data -> onchip_memory2_0_s1_agent:rdata_fifo_sink_data
	wire         onchip_memory2_0_s1_agent_rdata_fifo_src_ready;                              // onchip_memory2_0_s1_agent:rdata_fifo_sink_ready -> onchip_memory2_0_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_002_src_valid;                                                       // cmd_mux_002:src_valid -> onchip_memory2_0_s1_agent:cp_valid
	wire  [95:0] cmd_mux_002_src_data;                                                        // cmd_mux_002:src_data -> onchip_memory2_0_s1_agent:cp_data
	wire         cmd_mux_002_src_ready;                                                       // onchip_memory2_0_s1_agent:cp_ready -> cmd_mux_002:src_ready
	wire  [13:0] cmd_mux_002_src_channel;                                                     // cmd_mux_002:src_channel -> onchip_memory2_0_s1_agent:cp_channel
	wire         cmd_mux_002_src_startofpacket;                                               // cmd_mux_002:src_startofpacket -> onchip_memory2_0_s1_agent:cp_startofpacket
	wire         cmd_mux_002_src_endofpacket;                                                 // cmd_mux_002:src_endofpacket -> onchip_memory2_0_s1_agent:cp_endofpacket
	wire  [31:0] uart_s1_agent_m0_readdata;                                                   // uart_s1_translator:uav_readdata -> uart_s1_agent:m0_readdata
	wire         uart_s1_agent_m0_waitrequest;                                                // uart_s1_translator:uav_waitrequest -> uart_s1_agent:m0_waitrequest
	wire         uart_s1_agent_m0_debugaccess;                                                // uart_s1_agent:m0_debugaccess -> uart_s1_translator:uav_debugaccess
	wire  [17:0] uart_s1_agent_m0_address;                                                    // uart_s1_agent:m0_address -> uart_s1_translator:uav_address
	wire   [3:0] uart_s1_agent_m0_byteenable;                                                 // uart_s1_agent:m0_byteenable -> uart_s1_translator:uav_byteenable
	wire         uart_s1_agent_m0_read;                                                       // uart_s1_agent:m0_read -> uart_s1_translator:uav_read
	wire         uart_s1_agent_m0_readdatavalid;                                              // uart_s1_translator:uav_readdatavalid -> uart_s1_agent:m0_readdatavalid
	wire         uart_s1_agent_m0_lock;                                                       // uart_s1_agent:m0_lock -> uart_s1_translator:uav_lock
	wire  [31:0] uart_s1_agent_m0_writedata;                                                  // uart_s1_agent:m0_writedata -> uart_s1_translator:uav_writedata
	wire         uart_s1_agent_m0_write;                                                      // uart_s1_agent:m0_write -> uart_s1_translator:uav_write
	wire   [2:0] uart_s1_agent_m0_burstcount;                                                 // uart_s1_agent:m0_burstcount -> uart_s1_translator:uav_burstcount
	wire         uart_s1_agent_rf_source_valid;                                               // uart_s1_agent:rf_source_valid -> uart_s1_agent_rsp_fifo:in_valid
	wire  [96:0] uart_s1_agent_rf_source_data;                                                // uart_s1_agent:rf_source_data -> uart_s1_agent_rsp_fifo:in_data
	wire         uart_s1_agent_rf_source_ready;                                               // uart_s1_agent_rsp_fifo:in_ready -> uart_s1_agent:rf_source_ready
	wire         uart_s1_agent_rf_source_startofpacket;                                       // uart_s1_agent:rf_source_startofpacket -> uart_s1_agent_rsp_fifo:in_startofpacket
	wire         uart_s1_agent_rf_source_endofpacket;                                         // uart_s1_agent:rf_source_endofpacket -> uart_s1_agent_rsp_fifo:in_endofpacket
	wire         uart_s1_agent_rsp_fifo_out_valid;                                            // uart_s1_agent_rsp_fifo:out_valid -> uart_s1_agent:rf_sink_valid
	wire  [96:0] uart_s1_agent_rsp_fifo_out_data;                                             // uart_s1_agent_rsp_fifo:out_data -> uart_s1_agent:rf_sink_data
	wire         uart_s1_agent_rsp_fifo_out_ready;                                            // uart_s1_agent:rf_sink_ready -> uart_s1_agent_rsp_fifo:out_ready
	wire         uart_s1_agent_rsp_fifo_out_startofpacket;                                    // uart_s1_agent_rsp_fifo:out_startofpacket -> uart_s1_agent:rf_sink_startofpacket
	wire         uart_s1_agent_rsp_fifo_out_endofpacket;                                      // uart_s1_agent_rsp_fifo:out_endofpacket -> uart_s1_agent:rf_sink_endofpacket
	wire         uart_s1_agent_rdata_fifo_src_valid;                                          // uart_s1_agent:rdata_fifo_src_valid -> uart_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] uart_s1_agent_rdata_fifo_src_data;                                           // uart_s1_agent:rdata_fifo_src_data -> uart_s1_agent:rdata_fifo_sink_data
	wire         uart_s1_agent_rdata_fifo_src_ready;                                          // uart_s1_agent:rdata_fifo_sink_ready -> uart_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_003_src_valid;                                                       // cmd_mux_003:src_valid -> uart_s1_agent:cp_valid
	wire  [95:0] cmd_mux_003_src_data;                                                        // cmd_mux_003:src_data -> uart_s1_agent:cp_data
	wire         cmd_mux_003_src_ready;                                                       // uart_s1_agent:cp_ready -> cmd_mux_003:src_ready
	wire  [13:0] cmd_mux_003_src_channel;                                                     // cmd_mux_003:src_channel -> uart_s1_agent:cp_channel
	wire         cmd_mux_003_src_startofpacket;                                               // cmd_mux_003:src_startofpacket -> uart_s1_agent:cp_startofpacket
	wire         cmd_mux_003_src_endofpacket;                                                 // cmd_mux_003:src_endofpacket -> uart_s1_agent:cp_endofpacket
	wire  [31:0] pio_addr_s1_agent_m0_readdata;                                               // pio_addr_s1_translator:uav_readdata -> pio_addr_s1_agent:m0_readdata
	wire         pio_addr_s1_agent_m0_waitrequest;                                            // pio_addr_s1_translator:uav_waitrequest -> pio_addr_s1_agent:m0_waitrequest
	wire         pio_addr_s1_agent_m0_debugaccess;                                            // pio_addr_s1_agent:m0_debugaccess -> pio_addr_s1_translator:uav_debugaccess
	wire  [17:0] pio_addr_s1_agent_m0_address;                                                // pio_addr_s1_agent:m0_address -> pio_addr_s1_translator:uav_address
	wire   [3:0] pio_addr_s1_agent_m0_byteenable;                                             // pio_addr_s1_agent:m0_byteenable -> pio_addr_s1_translator:uav_byteenable
	wire         pio_addr_s1_agent_m0_read;                                                   // pio_addr_s1_agent:m0_read -> pio_addr_s1_translator:uav_read
	wire         pio_addr_s1_agent_m0_readdatavalid;                                          // pio_addr_s1_translator:uav_readdatavalid -> pio_addr_s1_agent:m0_readdatavalid
	wire         pio_addr_s1_agent_m0_lock;                                                   // pio_addr_s1_agent:m0_lock -> pio_addr_s1_translator:uav_lock
	wire  [31:0] pio_addr_s1_agent_m0_writedata;                                              // pio_addr_s1_agent:m0_writedata -> pio_addr_s1_translator:uav_writedata
	wire         pio_addr_s1_agent_m0_write;                                                  // pio_addr_s1_agent:m0_write -> pio_addr_s1_translator:uav_write
	wire   [2:0] pio_addr_s1_agent_m0_burstcount;                                             // pio_addr_s1_agent:m0_burstcount -> pio_addr_s1_translator:uav_burstcount
	wire         pio_addr_s1_agent_rf_source_valid;                                           // pio_addr_s1_agent:rf_source_valid -> pio_addr_s1_agent_rsp_fifo:in_valid
	wire  [96:0] pio_addr_s1_agent_rf_source_data;                                            // pio_addr_s1_agent:rf_source_data -> pio_addr_s1_agent_rsp_fifo:in_data
	wire         pio_addr_s1_agent_rf_source_ready;                                           // pio_addr_s1_agent_rsp_fifo:in_ready -> pio_addr_s1_agent:rf_source_ready
	wire         pio_addr_s1_agent_rf_source_startofpacket;                                   // pio_addr_s1_agent:rf_source_startofpacket -> pio_addr_s1_agent_rsp_fifo:in_startofpacket
	wire         pio_addr_s1_agent_rf_source_endofpacket;                                     // pio_addr_s1_agent:rf_source_endofpacket -> pio_addr_s1_agent_rsp_fifo:in_endofpacket
	wire         pio_addr_s1_agent_rsp_fifo_out_valid;                                        // pio_addr_s1_agent_rsp_fifo:out_valid -> pio_addr_s1_agent:rf_sink_valid
	wire  [96:0] pio_addr_s1_agent_rsp_fifo_out_data;                                         // pio_addr_s1_agent_rsp_fifo:out_data -> pio_addr_s1_agent:rf_sink_data
	wire         pio_addr_s1_agent_rsp_fifo_out_ready;                                        // pio_addr_s1_agent:rf_sink_ready -> pio_addr_s1_agent_rsp_fifo:out_ready
	wire         pio_addr_s1_agent_rsp_fifo_out_startofpacket;                                // pio_addr_s1_agent_rsp_fifo:out_startofpacket -> pio_addr_s1_agent:rf_sink_startofpacket
	wire         pio_addr_s1_agent_rsp_fifo_out_endofpacket;                                  // pio_addr_s1_agent_rsp_fifo:out_endofpacket -> pio_addr_s1_agent:rf_sink_endofpacket
	wire         pio_addr_s1_agent_rdata_fifo_src_valid;                                      // pio_addr_s1_agent:rdata_fifo_src_valid -> pio_addr_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] pio_addr_s1_agent_rdata_fifo_src_data;                                       // pio_addr_s1_agent:rdata_fifo_src_data -> pio_addr_s1_agent:rdata_fifo_sink_data
	wire         pio_addr_s1_agent_rdata_fifo_src_ready;                                      // pio_addr_s1_agent:rdata_fifo_sink_ready -> pio_addr_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_004_src_valid;                                                       // cmd_mux_004:src_valid -> pio_addr_s1_agent:cp_valid
	wire  [95:0] cmd_mux_004_src_data;                                                        // cmd_mux_004:src_data -> pio_addr_s1_agent:cp_data
	wire         cmd_mux_004_src_ready;                                                       // pio_addr_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire  [13:0] cmd_mux_004_src_channel;                                                     // cmd_mux_004:src_channel -> pio_addr_s1_agent:cp_channel
	wire         cmd_mux_004_src_startofpacket;                                               // cmd_mux_004:src_startofpacket -> pio_addr_s1_agent:cp_startofpacket
	wire         cmd_mux_004_src_endofpacket;                                                 // cmd_mux_004:src_endofpacket -> pio_addr_s1_agent:cp_endofpacket
	wire  [31:0] pio_data_s1_agent_m0_readdata;                                               // pio_data_s1_translator:uav_readdata -> pio_data_s1_agent:m0_readdata
	wire         pio_data_s1_agent_m0_waitrequest;                                            // pio_data_s1_translator:uav_waitrequest -> pio_data_s1_agent:m0_waitrequest
	wire         pio_data_s1_agent_m0_debugaccess;                                            // pio_data_s1_agent:m0_debugaccess -> pio_data_s1_translator:uav_debugaccess
	wire  [17:0] pio_data_s1_agent_m0_address;                                                // pio_data_s1_agent:m0_address -> pio_data_s1_translator:uav_address
	wire   [3:0] pio_data_s1_agent_m0_byteenable;                                             // pio_data_s1_agent:m0_byteenable -> pio_data_s1_translator:uav_byteenable
	wire         pio_data_s1_agent_m0_read;                                                   // pio_data_s1_agent:m0_read -> pio_data_s1_translator:uav_read
	wire         pio_data_s1_agent_m0_readdatavalid;                                          // pio_data_s1_translator:uav_readdatavalid -> pio_data_s1_agent:m0_readdatavalid
	wire         pio_data_s1_agent_m0_lock;                                                   // pio_data_s1_agent:m0_lock -> pio_data_s1_translator:uav_lock
	wire  [31:0] pio_data_s1_agent_m0_writedata;                                              // pio_data_s1_agent:m0_writedata -> pio_data_s1_translator:uav_writedata
	wire         pio_data_s1_agent_m0_write;                                                  // pio_data_s1_agent:m0_write -> pio_data_s1_translator:uav_write
	wire   [2:0] pio_data_s1_agent_m0_burstcount;                                             // pio_data_s1_agent:m0_burstcount -> pio_data_s1_translator:uav_burstcount
	wire         pio_data_s1_agent_rf_source_valid;                                           // pio_data_s1_agent:rf_source_valid -> pio_data_s1_agent_rsp_fifo:in_valid
	wire  [96:0] pio_data_s1_agent_rf_source_data;                                            // pio_data_s1_agent:rf_source_data -> pio_data_s1_agent_rsp_fifo:in_data
	wire         pio_data_s1_agent_rf_source_ready;                                           // pio_data_s1_agent_rsp_fifo:in_ready -> pio_data_s1_agent:rf_source_ready
	wire         pio_data_s1_agent_rf_source_startofpacket;                                   // pio_data_s1_agent:rf_source_startofpacket -> pio_data_s1_agent_rsp_fifo:in_startofpacket
	wire         pio_data_s1_agent_rf_source_endofpacket;                                     // pio_data_s1_agent:rf_source_endofpacket -> pio_data_s1_agent_rsp_fifo:in_endofpacket
	wire         pio_data_s1_agent_rsp_fifo_out_valid;                                        // pio_data_s1_agent_rsp_fifo:out_valid -> pio_data_s1_agent:rf_sink_valid
	wire  [96:0] pio_data_s1_agent_rsp_fifo_out_data;                                         // pio_data_s1_agent_rsp_fifo:out_data -> pio_data_s1_agent:rf_sink_data
	wire         pio_data_s1_agent_rsp_fifo_out_ready;                                        // pio_data_s1_agent:rf_sink_ready -> pio_data_s1_agent_rsp_fifo:out_ready
	wire         pio_data_s1_agent_rsp_fifo_out_startofpacket;                                // pio_data_s1_agent_rsp_fifo:out_startofpacket -> pio_data_s1_agent:rf_sink_startofpacket
	wire         pio_data_s1_agent_rsp_fifo_out_endofpacket;                                  // pio_data_s1_agent_rsp_fifo:out_endofpacket -> pio_data_s1_agent:rf_sink_endofpacket
	wire         pio_data_s1_agent_rdata_fifo_src_valid;                                      // pio_data_s1_agent:rdata_fifo_src_valid -> pio_data_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] pio_data_s1_agent_rdata_fifo_src_data;                                       // pio_data_s1_agent:rdata_fifo_src_data -> pio_data_s1_agent:rdata_fifo_sink_data
	wire         pio_data_s1_agent_rdata_fifo_src_ready;                                      // pio_data_s1_agent:rdata_fifo_sink_ready -> pio_data_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_005_src_valid;                                                       // cmd_mux_005:src_valid -> pio_data_s1_agent:cp_valid
	wire  [95:0] cmd_mux_005_src_data;                                                        // cmd_mux_005:src_data -> pio_data_s1_agent:cp_data
	wire         cmd_mux_005_src_ready;                                                       // pio_data_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire  [13:0] cmd_mux_005_src_channel;                                                     // cmd_mux_005:src_channel -> pio_data_s1_agent:cp_channel
	wire         cmd_mux_005_src_startofpacket;                                               // cmd_mux_005:src_startofpacket -> pio_data_s1_agent:cp_startofpacket
	wire         cmd_mux_005_src_endofpacket;                                                 // cmd_mux_005:src_endofpacket -> pio_data_s1_agent:cp_endofpacket
	wire  [31:0] pio_clk_s1_agent_m0_readdata;                                                // pio_clk_s1_translator:uav_readdata -> pio_clk_s1_agent:m0_readdata
	wire         pio_clk_s1_agent_m0_waitrequest;                                             // pio_clk_s1_translator:uav_waitrequest -> pio_clk_s1_agent:m0_waitrequest
	wire         pio_clk_s1_agent_m0_debugaccess;                                             // pio_clk_s1_agent:m0_debugaccess -> pio_clk_s1_translator:uav_debugaccess
	wire  [17:0] pio_clk_s1_agent_m0_address;                                                 // pio_clk_s1_agent:m0_address -> pio_clk_s1_translator:uav_address
	wire   [3:0] pio_clk_s1_agent_m0_byteenable;                                              // pio_clk_s1_agent:m0_byteenable -> pio_clk_s1_translator:uav_byteenable
	wire         pio_clk_s1_agent_m0_read;                                                    // pio_clk_s1_agent:m0_read -> pio_clk_s1_translator:uav_read
	wire         pio_clk_s1_agent_m0_readdatavalid;                                           // pio_clk_s1_translator:uav_readdatavalid -> pio_clk_s1_agent:m0_readdatavalid
	wire         pio_clk_s1_agent_m0_lock;                                                    // pio_clk_s1_agent:m0_lock -> pio_clk_s1_translator:uav_lock
	wire  [31:0] pio_clk_s1_agent_m0_writedata;                                               // pio_clk_s1_agent:m0_writedata -> pio_clk_s1_translator:uav_writedata
	wire         pio_clk_s1_agent_m0_write;                                                   // pio_clk_s1_agent:m0_write -> pio_clk_s1_translator:uav_write
	wire   [2:0] pio_clk_s1_agent_m0_burstcount;                                              // pio_clk_s1_agent:m0_burstcount -> pio_clk_s1_translator:uav_burstcount
	wire         pio_clk_s1_agent_rf_source_valid;                                            // pio_clk_s1_agent:rf_source_valid -> pio_clk_s1_agent_rsp_fifo:in_valid
	wire  [96:0] pio_clk_s1_agent_rf_source_data;                                             // pio_clk_s1_agent:rf_source_data -> pio_clk_s1_agent_rsp_fifo:in_data
	wire         pio_clk_s1_agent_rf_source_ready;                                            // pio_clk_s1_agent_rsp_fifo:in_ready -> pio_clk_s1_agent:rf_source_ready
	wire         pio_clk_s1_agent_rf_source_startofpacket;                                    // pio_clk_s1_agent:rf_source_startofpacket -> pio_clk_s1_agent_rsp_fifo:in_startofpacket
	wire         pio_clk_s1_agent_rf_source_endofpacket;                                      // pio_clk_s1_agent:rf_source_endofpacket -> pio_clk_s1_agent_rsp_fifo:in_endofpacket
	wire         pio_clk_s1_agent_rsp_fifo_out_valid;                                         // pio_clk_s1_agent_rsp_fifo:out_valid -> pio_clk_s1_agent:rf_sink_valid
	wire  [96:0] pio_clk_s1_agent_rsp_fifo_out_data;                                          // pio_clk_s1_agent_rsp_fifo:out_data -> pio_clk_s1_agent:rf_sink_data
	wire         pio_clk_s1_agent_rsp_fifo_out_ready;                                         // pio_clk_s1_agent:rf_sink_ready -> pio_clk_s1_agent_rsp_fifo:out_ready
	wire         pio_clk_s1_agent_rsp_fifo_out_startofpacket;                                 // pio_clk_s1_agent_rsp_fifo:out_startofpacket -> pio_clk_s1_agent:rf_sink_startofpacket
	wire         pio_clk_s1_agent_rsp_fifo_out_endofpacket;                                   // pio_clk_s1_agent_rsp_fifo:out_endofpacket -> pio_clk_s1_agent:rf_sink_endofpacket
	wire         pio_clk_s1_agent_rdata_fifo_src_valid;                                       // pio_clk_s1_agent:rdata_fifo_src_valid -> pio_clk_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] pio_clk_s1_agent_rdata_fifo_src_data;                                        // pio_clk_s1_agent:rdata_fifo_src_data -> pio_clk_s1_agent:rdata_fifo_sink_data
	wire         pio_clk_s1_agent_rdata_fifo_src_ready;                                       // pio_clk_s1_agent:rdata_fifo_sink_ready -> pio_clk_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_006_src_valid;                                                       // cmd_mux_006:src_valid -> pio_clk_s1_agent:cp_valid
	wire  [95:0] cmd_mux_006_src_data;                                                        // cmd_mux_006:src_data -> pio_clk_s1_agent:cp_data
	wire         cmd_mux_006_src_ready;                                                       // pio_clk_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire  [13:0] cmd_mux_006_src_channel;                                                     // cmd_mux_006:src_channel -> pio_clk_s1_agent:cp_channel
	wire         cmd_mux_006_src_startofpacket;                                               // cmd_mux_006:src_startofpacket -> pio_clk_s1_agent:cp_startofpacket
	wire         cmd_mux_006_src_endofpacket;                                                 // cmd_mux_006:src_endofpacket -> pio_clk_s1_agent:cp_endofpacket
	wire  [31:0] pio_ctr_out_s1_agent_m0_readdata;                                            // pio_ctr_out_s1_translator:uav_readdata -> pio_ctr_out_s1_agent:m0_readdata
	wire         pio_ctr_out_s1_agent_m0_waitrequest;                                         // pio_ctr_out_s1_translator:uav_waitrequest -> pio_ctr_out_s1_agent:m0_waitrequest
	wire         pio_ctr_out_s1_agent_m0_debugaccess;                                         // pio_ctr_out_s1_agent:m0_debugaccess -> pio_ctr_out_s1_translator:uav_debugaccess
	wire  [17:0] pio_ctr_out_s1_agent_m0_address;                                             // pio_ctr_out_s1_agent:m0_address -> pio_ctr_out_s1_translator:uav_address
	wire   [3:0] pio_ctr_out_s1_agent_m0_byteenable;                                          // pio_ctr_out_s1_agent:m0_byteenable -> pio_ctr_out_s1_translator:uav_byteenable
	wire         pio_ctr_out_s1_agent_m0_read;                                                // pio_ctr_out_s1_agent:m0_read -> pio_ctr_out_s1_translator:uav_read
	wire         pio_ctr_out_s1_agent_m0_readdatavalid;                                       // pio_ctr_out_s1_translator:uav_readdatavalid -> pio_ctr_out_s1_agent:m0_readdatavalid
	wire         pio_ctr_out_s1_agent_m0_lock;                                                // pio_ctr_out_s1_agent:m0_lock -> pio_ctr_out_s1_translator:uav_lock
	wire  [31:0] pio_ctr_out_s1_agent_m0_writedata;                                           // pio_ctr_out_s1_agent:m0_writedata -> pio_ctr_out_s1_translator:uav_writedata
	wire         pio_ctr_out_s1_agent_m0_write;                                               // pio_ctr_out_s1_agent:m0_write -> pio_ctr_out_s1_translator:uav_write
	wire   [2:0] pio_ctr_out_s1_agent_m0_burstcount;                                          // pio_ctr_out_s1_agent:m0_burstcount -> pio_ctr_out_s1_translator:uav_burstcount
	wire         pio_ctr_out_s1_agent_rf_source_valid;                                        // pio_ctr_out_s1_agent:rf_source_valid -> pio_ctr_out_s1_agent_rsp_fifo:in_valid
	wire  [96:0] pio_ctr_out_s1_agent_rf_source_data;                                         // pio_ctr_out_s1_agent:rf_source_data -> pio_ctr_out_s1_agent_rsp_fifo:in_data
	wire         pio_ctr_out_s1_agent_rf_source_ready;                                        // pio_ctr_out_s1_agent_rsp_fifo:in_ready -> pio_ctr_out_s1_agent:rf_source_ready
	wire         pio_ctr_out_s1_agent_rf_source_startofpacket;                                // pio_ctr_out_s1_agent:rf_source_startofpacket -> pio_ctr_out_s1_agent_rsp_fifo:in_startofpacket
	wire         pio_ctr_out_s1_agent_rf_source_endofpacket;                                  // pio_ctr_out_s1_agent:rf_source_endofpacket -> pio_ctr_out_s1_agent_rsp_fifo:in_endofpacket
	wire         pio_ctr_out_s1_agent_rsp_fifo_out_valid;                                     // pio_ctr_out_s1_agent_rsp_fifo:out_valid -> pio_ctr_out_s1_agent:rf_sink_valid
	wire  [96:0] pio_ctr_out_s1_agent_rsp_fifo_out_data;                                      // pio_ctr_out_s1_agent_rsp_fifo:out_data -> pio_ctr_out_s1_agent:rf_sink_data
	wire         pio_ctr_out_s1_agent_rsp_fifo_out_ready;                                     // pio_ctr_out_s1_agent:rf_sink_ready -> pio_ctr_out_s1_agent_rsp_fifo:out_ready
	wire         pio_ctr_out_s1_agent_rsp_fifo_out_startofpacket;                             // pio_ctr_out_s1_agent_rsp_fifo:out_startofpacket -> pio_ctr_out_s1_agent:rf_sink_startofpacket
	wire         pio_ctr_out_s1_agent_rsp_fifo_out_endofpacket;                               // pio_ctr_out_s1_agent_rsp_fifo:out_endofpacket -> pio_ctr_out_s1_agent:rf_sink_endofpacket
	wire         pio_ctr_out_s1_agent_rdata_fifo_src_valid;                                   // pio_ctr_out_s1_agent:rdata_fifo_src_valid -> pio_ctr_out_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] pio_ctr_out_s1_agent_rdata_fifo_src_data;                                    // pio_ctr_out_s1_agent:rdata_fifo_src_data -> pio_ctr_out_s1_agent:rdata_fifo_sink_data
	wire         pio_ctr_out_s1_agent_rdata_fifo_src_ready;                                   // pio_ctr_out_s1_agent:rdata_fifo_sink_ready -> pio_ctr_out_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_007_src_valid;                                                       // cmd_mux_007:src_valid -> pio_ctr_out_s1_agent:cp_valid
	wire  [95:0] cmd_mux_007_src_data;                                                        // cmd_mux_007:src_data -> pio_ctr_out_s1_agent:cp_data
	wire         cmd_mux_007_src_ready;                                                       // pio_ctr_out_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire  [13:0] cmd_mux_007_src_channel;                                                     // cmd_mux_007:src_channel -> pio_ctr_out_s1_agent:cp_channel
	wire         cmd_mux_007_src_startofpacket;                                               // cmd_mux_007:src_startofpacket -> pio_ctr_out_s1_agent:cp_startofpacket
	wire         cmd_mux_007_src_endofpacket;                                                 // cmd_mux_007:src_endofpacket -> pio_ctr_out_s1_agent:cp_endofpacket
	wire  [31:0] pio_reset_s1_agent_m0_readdata;                                              // pio_reset_s1_translator:uav_readdata -> pio_reset_s1_agent:m0_readdata
	wire         pio_reset_s1_agent_m0_waitrequest;                                           // pio_reset_s1_translator:uav_waitrequest -> pio_reset_s1_agent:m0_waitrequest
	wire         pio_reset_s1_agent_m0_debugaccess;                                           // pio_reset_s1_agent:m0_debugaccess -> pio_reset_s1_translator:uav_debugaccess
	wire  [17:0] pio_reset_s1_agent_m0_address;                                               // pio_reset_s1_agent:m0_address -> pio_reset_s1_translator:uav_address
	wire   [3:0] pio_reset_s1_agent_m0_byteenable;                                            // pio_reset_s1_agent:m0_byteenable -> pio_reset_s1_translator:uav_byteenable
	wire         pio_reset_s1_agent_m0_read;                                                  // pio_reset_s1_agent:m0_read -> pio_reset_s1_translator:uav_read
	wire         pio_reset_s1_agent_m0_readdatavalid;                                         // pio_reset_s1_translator:uav_readdatavalid -> pio_reset_s1_agent:m0_readdatavalid
	wire         pio_reset_s1_agent_m0_lock;                                                  // pio_reset_s1_agent:m0_lock -> pio_reset_s1_translator:uav_lock
	wire  [31:0] pio_reset_s1_agent_m0_writedata;                                             // pio_reset_s1_agent:m0_writedata -> pio_reset_s1_translator:uav_writedata
	wire         pio_reset_s1_agent_m0_write;                                                 // pio_reset_s1_agent:m0_write -> pio_reset_s1_translator:uav_write
	wire   [2:0] pio_reset_s1_agent_m0_burstcount;                                            // pio_reset_s1_agent:m0_burstcount -> pio_reset_s1_translator:uav_burstcount
	wire         pio_reset_s1_agent_rf_source_valid;                                          // pio_reset_s1_agent:rf_source_valid -> pio_reset_s1_agent_rsp_fifo:in_valid
	wire  [96:0] pio_reset_s1_agent_rf_source_data;                                           // pio_reset_s1_agent:rf_source_data -> pio_reset_s1_agent_rsp_fifo:in_data
	wire         pio_reset_s1_agent_rf_source_ready;                                          // pio_reset_s1_agent_rsp_fifo:in_ready -> pio_reset_s1_agent:rf_source_ready
	wire         pio_reset_s1_agent_rf_source_startofpacket;                                  // pio_reset_s1_agent:rf_source_startofpacket -> pio_reset_s1_agent_rsp_fifo:in_startofpacket
	wire         pio_reset_s1_agent_rf_source_endofpacket;                                    // pio_reset_s1_agent:rf_source_endofpacket -> pio_reset_s1_agent_rsp_fifo:in_endofpacket
	wire         pio_reset_s1_agent_rsp_fifo_out_valid;                                       // pio_reset_s1_agent_rsp_fifo:out_valid -> pio_reset_s1_agent:rf_sink_valid
	wire  [96:0] pio_reset_s1_agent_rsp_fifo_out_data;                                        // pio_reset_s1_agent_rsp_fifo:out_data -> pio_reset_s1_agent:rf_sink_data
	wire         pio_reset_s1_agent_rsp_fifo_out_ready;                                       // pio_reset_s1_agent:rf_sink_ready -> pio_reset_s1_agent_rsp_fifo:out_ready
	wire         pio_reset_s1_agent_rsp_fifo_out_startofpacket;                               // pio_reset_s1_agent_rsp_fifo:out_startofpacket -> pio_reset_s1_agent:rf_sink_startofpacket
	wire         pio_reset_s1_agent_rsp_fifo_out_endofpacket;                                 // pio_reset_s1_agent_rsp_fifo:out_endofpacket -> pio_reset_s1_agent:rf_sink_endofpacket
	wire         pio_reset_s1_agent_rdata_fifo_src_valid;                                     // pio_reset_s1_agent:rdata_fifo_src_valid -> pio_reset_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] pio_reset_s1_agent_rdata_fifo_src_data;                                      // pio_reset_s1_agent:rdata_fifo_src_data -> pio_reset_s1_agent:rdata_fifo_sink_data
	wire         pio_reset_s1_agent_rdata_fifo_src_ready;                                     // pio_reset_s1_agent:rdata_fifo_sink_ready -> pio_reset_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_008_src_valid;                                                       // cmd_mux_008:src_valid -> pio_reset_s1_agent:cp_valid
	wire  [95:0] cmd_mux_008_src_data;                                                        // cmd_mux_008:src_data -> pio_reset_s1_agent:cp_data
	wire         cmd_mux_008_src_ready;                                                       // pio_reset_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire  [13:0] cmd_mux_008_src_channel;                                                     // cmd_mux_008:src_channel -> pio_reset_s1_agent:cp_channel
	wire         cmd_mux_008_src_startofpacket;                                               // cmd_mux_008:src_startofpacket -> pio_reset_s1_agent:cp_startofpacket
	wire         cmd_mux_008_src_endofpacket;                                                 // cmd_mux_008:src_endofpacket -> pio_reset_s1_agent:cp_endofpacket
	wire  [31:0] pio_spi_clk_s1_agent_m0_readdata;                                            // pio_spi_clk_s1_translator:uav_readdata -> pio_spi_clk_s1_agent:m0_readdata
	wire         pio_spi_clk_s1_agent_m0_waitrequest;                                         // pio_spi_clk_s1_translator:uav_waitrequest -> pio_spi_clk_s1_agent:m0_waitrequest
	wire         pio_spi_clk_s1_agent_m0_debugaccess;                                         // pio_spi_clk_s1_agent:m0_debugaccess -> pio_spi_clk_s1_translator:uav_debugaccess
	wire  [17:0] pio_spi_clk_s1_agent_m0_address;                                             // pio_spi_clk_s1_agent:m0_address -> pio_spi_clk_s1_translator:uav_address
	wire   [3:0] pio_spi_clk_s1_agent_m0_byteenable;                                          // pio_spi_clk_s1_agent:m0_byteenable -> pio_spi_clk_s1_translator:uav_byteenable
	wire         pio_spi_clk_s1_agent_m0_read;                                                // pio_spi_clk_s1_agent:m0_read -> pio_spi_clk_s1_translator:uav_read
	wire         pio_spi_clk_s1_agent_m0_readdatavalid;                                       // pio_spi_clk_s1_translator:uav_readdatavalid -> pio_spi_clk_s1_agent:m0_readdatavalid
	wire         pio_spi_clk_s1_agent_m0_lock;                                                // pio_spi_clk_s1_agent:m0_lock -> pio_spi_clk_s1_translator:uav_lock
	wire  [31:0] pio_spi_clk_s1_agent_m0_writedata;                                           // pio_spi_clk_s1_agent:m0_writedata -> pio_spi_clk_s1_translator:uav_writedata
	wire         pio_spi_clk_s1_agent_m0_write;                                               // pio_spi_clk_s1_agent:m0_write -> pio_spi_clk_s1_translator:uav_write
	wire   [2:0] pio_spi_clk_s1_agent_m0_burstcount;                                          // pio_spi_clk_s1_agent:m0_burstcount -> pio_spi_clk_s1_translator:uav_burstcount
	wire         pio_spi_clk_s1_agent_rf_source_valid;                                        // pio_spi_clk_s1_agent:rf_source_valid -> pio_spi_clk_s1_agent_rsp_fifo:in_valid
	wire  [96:0] pio_spi_clk_s1_agent_rf_source_data;                                         // pio_spi_clk_s1_agent:rf_source_data -> pio_spi_clk_s1_agent_rsp_fifo:in_data
	wire         pio_spi_clk_s1_agent_rf_source_ready;                                        // pio_spi_clk_s1_agent_rsp_fifo:in_ready -> pio_spi_clk_s1_agent:rf_source_ready
	wire         pio_spi_clk_s1_agent_rf_source_startofpacket;                                // pio_spi_clk_s1_agent:rf_source_startofpacket -> pio_spi_clk_s1_agent_rsp_fifo:in_startofpacket
	wire         pio_spi_clk_s1_agent_rf_source_endofpacket;                                  // pio_spi_clk_s1_agent:rf_source_endofpacket -> pio_spi_clk_s1_agent_rsp_fifo:in_endofpacket
	wire         pio_spi_clk_s1_agent_rsp_fifo_out_valid;                                     // pio_spi_clk_s1_agent_rsp_fifo:out_valid -> pio_spi_clk_s1_agent:rf_sink_valid
	wire  [96:0] pio_spi_clk_s1_agent_rsp_fifo_out_data;                                      // pio_spi_clk_s1_agent_rsp_fifo:out_data -> pio_spi_clk_s1_agent:rf_sink_data
	wire         pio_spi_clk_s1_agent_rsp_fifo_out_ready;                                     // pio_spi_clk_s1_agent:rf_sink_ready -> pio_spi_clk_s1_agent_rsp_fifo:out_ready
	wire         pio_spi_clk_s1_agent_rsp_fifo_out_startofpacket;                             // pio_spi_clk_s1_agent_rsp_fifo:out_startofpacket -> pio_spi_clk_s1_agent:rf_sink_startofpacket
	wire         pio_spi_clk_s1_agent_rsp_fifo_out_endofpacket;                               // pio_spi_clk_s1_agent_rsp_fifo:out_endofpacket -> pio_spi_clk_s1_agent:rf_sink_endofpacket
	wire         pio_spi_clk_s1_agent_rdata_fifo_src_valid;                                   // pio_spi_clk_s1_agent:rdata_fifo_src_valid -> pio_spi_clk_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] pio_spi_clk_s1_agent_rdata_fifo_src_data;                                    // pio_spi_clk_s1_agent:rdata_fifo_src_data -> pio_spi_clk_s1_agent:rdata_fifo_sink_data
	wire         pio_spi_clk_s1_agent_rdata_fifo_src_ready;                                   // pio_spi_clk_s1_agent:rdata_fifo_sink_ready -> pio_spi_clk_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_009_src_valid;                                                       // cmd_mux_009:src_valid -> pio_spi_clk_s1_agent:cp_valid
	wire  [95:0] cmd_mux_009_src_data;                                                        // cmd_mux_009:src_data -> pio_spi_clk_s1_agent:cp_data
	wire         cmd_mux_009_src_ready;                                                       // pio_spi_clk_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire  [13:0] cmd_mux_009_src_channel;                                                     // cmd_mux_009:src_channel -> pio_spi_clk_s1_agent:cp_channel
	wire         cmd_mux_009_src_startofpacket;                                               // cmd_mux_009:src_startofpacket -> pio_spi_clk_s1_agent:cp_startofpacket
	wire         cmd_mux_009_src_endofpacket;                                                 // cmd_mux_009:src_endofpacket -> pio_spi_clk_s1_agent:cp_endofpacket
	wire  [31:0] pio_spi_di_s1_agent_m0_readdata;                                             // pio_spi_di_s1_translator:uav_readdata -> pio_spi_di_s1_agent:m0_readdata
	wire         pio_spi_di_s1_agent_m0_waitrequest;                                          // pio_spi_di_s1_translator:uav_waitrequest -> pio_spi_di_s1_agent:m0_waitrequest
	wire         pio_spi_di_s1_agent_m0_debugaccess;                                          // pio_spi_di_s1_agent:m0_debugaccess -> pio_spi_di_s1_translator:uav_debugaccess
	wire  [17:0] pio_spi_di_s1_agent_m0_address;                                              // pio_spi_di_s1_agent:m0_address -> pio_spi_di_s1_translator:uav_address
	wire   [3:0] pio_spi_di_s1_agent_m0_byteenable;                                           // pio_spi_di_s1_agent:m0_byteenable -> pio_spi_di_s1_translator:uav_byteenable
	wire         pio_spi_di_s1_agent_m0_read;                                                 // pio_spi_di_s1_agent:m0_read -> pio_spi_di_s1_translator:uav_read
	wire         pio_spi_di_s1_agent_m0_readdatavalid;                                        // pio_spi_di_s1_translator:uav_readdatavalid -> pio_spi_di_s1_agent:m0_readdatavalid
	wire         pio_spi_di_s1_agent_m0_lock;                                                 // pio_spi_di_s1_agent:m0_lock -> pio_spi_di_s1_translator:uav_lock
	wire  [31:0] pio_spi_di_s1_agent_m0_writedata;                                            // pio_spi_di_s1_agent:m0_writedata -> pio_spi_di_s1_translator:uav_writedata
	wire         pio_spi_di_s1_agent_m0_write;                                                // pio_spi_di_s1_agent:m0_write -> pio_spi_di_s1_translator:uav_write
	wire   [2:0] pio_spi_di_s1_agent_m0_burstcount;                                           // pio_spi_di_s1_agent:m0_burstcount -> pio_spi_di_s1_translator:uav_burstcount
	wire         pio_spi_di_s1_agent_rf_source_valid;                                         // pio_spi_di_s1_agent:rf_source_valid -> pio_spi_di_s1_agent_rsp_fifo:in_valid
	wire  [96:0] pio_spi_di_s1_agent_rf_source_data;                                          // pio_spi_di_s1_agent:rf_source_data -> pio_spi_di_s1_agent_rsp_fifo:in_data
	wire         pio_spi_di_s1_agent_rf_source_ready;                                         // pio_spi_di_s1_agent_rsp_fifo:in_ready -> pio_spi_di_s1_agent:rf_source_ready
	wire         pio_spi_di_s1_agent_rf_source_startofpacket;                                 // pio_spi_di_s1_agent:rf_source_startofpacket -> pio_spi_di_s1_agent_rsp_fifo:in_startofpacket
	wire         pio_spi_di_s1_agent_rf_source_endofpacket;                                   // pio_spi_di_s1_agent:rf_source_endofpacket -> pio_spi_di_s1_agent_rsp_fifo:in_endofpacket
	wire         pio_spi_di_s1_agent_rsp_fifo_out_valid;                                      // pio_spi_di_s1_agent_rsp_fifo:out_valid -> pio_spi_di_s1_agent:rf_sink_valid
	wire  [96:0] pio_spi_di_s1_agent_rsp_fifo_out_data;                                       // pio_spi_di_s1_agent_rsp_fifo:out_data -> pio_spi_di_s1_agent:rf_sink_data
	wire         pio_spi_di_s1_agent_rsp_fifo_out_ready;                                      // pio_spi_di_s1_agent:rf_sink_ready -> pio_spi_di_s1_agent_rsp_fifo:out_ready
	wire         pio_spi_di_s1_agent_rsp_fifo_out_startofpacket;                              // pio_spi_di_s1_agent_rsp_fifo:out_startofpacket -> pio_spi_di_s1_agent:rf_sink_startofpacket
	wire         pio_spi_di_s1_agent_rsp_fifo_out_endofpacket;                                // pio_spi_di_s1_agent_rsp_fifo:out_endofpacket -> pio_spi_di_s1_agent:rf_sink_endofpacket
	wire         pio_spi_di_s1_agent_rdata_fifo_src_valid;                                    // pio_spi_di_s1_agent:rdata_fifo_src_valid -> pio_spi_di_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] pio_spi_di_s1_agent_rdata_fifo_src_data;                                     // pio_spi_di_s1_agent:rdata_fifo_src_data -> pio_spi_di_s1_agent:rdata_fifo_sink_data
	wire         pio_spi_di_s1_agent_rdata_fifo_src_ready;                                    // pio_spi_di_s1_agent:rdata_fifo_sink_ready -> pio_spi_di_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_010_src_valid;                                                       // cmd_mux_010:src_valid -> pio_spi_di_s1_agent:cp_valid
	wire  [95:0] cmd_mux_010_src_data;                                                        // cmd_mux_010:src_data -> pio_spi_di_s1_agent:cp_data
	wire         cmd_mux_010_src_ready;                                                       // pio_spi_di_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire  [13:0] cmd_mux_010_src_channel;                                                     // cmd_mux_010:src_channel -> pio_spi_di_s1_agent:cp_channel
	wire         cmd_mux_010_src_startofpacket;                                               // cmd_mux_010:src_startofpacket -> pio_spi_di_s1_agent:cp_startofpacket
	wire         cmd_mux_010_src_endofpacket;                                                 // cmd_mux_010:src_endofpacket -> pio_spi_di_s1_agent:cp_endofpacket
	wire  [31:0] pio_spi_do_s1_agent_m0_readdata;                                             // pio_spi_do_s1_translator:uav_readdata -> pio_spi_do_s1_agent:m0_readdata
	wire         pio_spi_do_s1_agent_m0_waitrequest;                                          // pio_spi_do_s1_translator:uav_waitrequest -> pio_spi_do_s1_agent:m0_waitrequest
	wire         pio_spi_do_s1_agent_m0_debugaccess;                                          // pio_spi_do_s1_agent:m0_debugaccess -> pio_spi_do_s1_translator:uav_debugaccess
	wire  [17:0] pio_spi_do_s1_agent_m0_address;                                              // pio_spi_do_s1_agent:m0_address -> pio_spi_do_s1_translator:uav_address
	wire   [3:0] pio_spi_do_s1_agent_m0_byteenable;                                           // pio_spi_do_s1_agent:m0_byteenable -> pio_spi_do_s1_translator:uav_byteenable
	wire         pio_spi_do_s1_agent_m0_read;                                                 // pio_spi_do_s1_agent:m0_read -> pio_spi_do_s1_translator:uav_read
	wire         pio_spi_do_s1_agent_m0_readdatavalid;                                        // pio_spi_do_s1_translator:uav_readdatavalid -> pio_spi_do_s1_agent:m0_readdatavalid
	wire         pio_spi_do_s1_agent_m0_lock;                                                 // pio_spi_do_s1_agent:m0_lock -> pio_spi_do_s1_translator:uav_lock
	wire  [31:0] pio_spi_do_s1_agent_m0_writedata;                                            // pio_spi_do_s1_agent:m0_writedata -> pio_spi_do_s1_translator:uav_writedata
	wire         pio_spi_do_s1_agent_m0_write;                                                // pio_spi_do_s1_agent:m0_write -> pio_spi_do_s1_translator:uav_write
	wire   [2:0] pio_spi_do_s1_agent_m0_burstcount;                                           // pio_spi_do_s1_agent:m0_burstcount -> pio_spi_do_s1_translator:uav_burstcount
	wire         pio_spi_do_s1_agent_rf_source_valid;                                         // pio_spi_do_s1_agent:rf_source_valid -> pio_spi_do_s1_agent_rsp_fifo:in_valid
	wire  [96:0] pio_spi_do_s1_agent_rf_source_data;                                          // pio_spi_do_s1_agent:rf_source_data -> pio_spi_do_s1_agent_rsp_fifo:in_data
	wire         pio_spi_do_s1_agent_rf_source_ready;                                         // pio_spi_do_s1_agent_rsp_fifo:in_ready -> pio_spi_do_s1_agent:rf_source_ready
	wire         pio_spi_do_s1_agent_rf_source_startofpacket;                                 // pio_spi_do_s1_agent:rf_source_startofpacket -> pio_spi_do_s1_agent_rsp_fifo:in_startofpacket
	wire         pio_spi_do_s1_agent_rf_source_endofpacket;                                   // pio_spi_do_s1_agent:rf_source_endofpacket -> pio_spi_do_s1_agent_rsp_fifo:in_endofpacket
	wire         pio_spi_do_s1_agent_rsp_fifo_out_valid;                                      // pio_spi_do_s1_agent_rsp_fifo:out_valid -> pio_spi_do_s1_agent:rf_sink_valid
	wire  [96:0] pio_spi_do_s1_agent_rsp_fifo_out_data;                                       // pio_spi_do_s1_agent_rsp_fifo:out_data -> pio_spi_do_s1_agent:rf_sink_data
	wire         pio_spi_do_s1_agent_rsp_fifo_out_ready;                                      // pio_spi_do_s1_agent:rf_sink_ready -> pio_spi_do_s1_agent_rsp_fifo:out_ready
	wire         pio_spi_do_s1_agent_rsp_fifo_out_startofpacket;                              // pio_spi_do_s1_agent_rsp_fifo:out_startofpacket -> pio_spi_do_s1_agent:rf_sink_startofpacket
	wire         pio_spi_do_s1_agent_rsp_fifo_out_endofpacket;                                // pio_spi_do_s1_agent_rsp_fifo:out_endofpacket -> pio_spi_do_s1_agent:rf_sink_endofpacket
	wire         pio_spi_do_s1_agent_rdata_fifo_src_valid;                                    // pio_spi_do_s1_agent:rdata_fifo_src_valid -> pio_spi_do_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] pio_spi_do_s1_agent_rdata_fifo_src_data;                                     // pio_spi_do_s1_agent:rdata_fifo_src_data -> pio_spi_do_s1_agent:rdata_fifo_sink_data
	wire         pio_spi_do_s1_agent_rdata_fifo_src_ready;                                    // pio_spi_do_s1_agent:rdata_fifo_sink_ready -> pio_spi_do_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_011_src_valid;                                                       // cmd_mux_011:src_valid -> pio_spi_do_s1_agent:cp_valid
	wire  [95:0] cmd_mux_011_src_data;                                                        // cmd_mux_011:src_data -> pio_spi_do_s1_agent:cp_data
	wire         cmd_mux_011_src_ready;                                                       // pio_spi_do_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire  [13:0] cmd_mux_011_src_channel;                                                     // cmd_mux_011:src_channel -> pio_spi_do_s1_agent:cp_channel
	wire         cmd_mux_011_src_startofpacket;                                               // cmd_mux_011:src_startofpacket -> pio_spi_do_s1_agent:cp_startofpacket
	wire         cmd_mux_011_src_endofpacket;                                                 // cmd_mux_011:src_endofpacket -> pio_spi_do_s1_agent:cp_endofpacket
	wire  [31:0] pio_spi_le_s1_agent_m0_readdata;                                             // pio_spi_le_s1_translator:uav_readdata -> pio_spi_le_s1_agent:m0_readdata
	wire         pio_spi_le_s1_agent_m0_waitrequest;                                          // pio_spi_le_s1_translator:uav_waitrequest -> pio_spi_le_s1_agent:m0_waitrequest
	wire         pio_spi_le_s1_agent_m0_debugaccess;                                          // pio_spi_le_s1_agent:m0_debugaccess -> pio_spi_le_s1_translator:uav_debugaccess
	wire  [17:0] pio_spi_le_s1_agent_m0_address;                                              // pio_spi_le_s1_agent:m0_address -> pio_spi_le_s1_translator:uav_address
	wire   [3:0] pio_spi_le_s1_agent_m0_byteenable;                                           // pio_spi_le_s1_agent:m0_byteenable -> pio_spi_le_s1_translator:uav_byteenable
	wire         pio_spi_le_s1_agent_m0_read;                                                 // pio_spi_le_s1_agent:m0_read -> pio_spi_le_s1_translator:uav_read
	wire         pio_spi_le_s1_agent_m0_readdatavalid;                                        // pio_spi_le_s1_translator:uav_readdatavalid -> pio_spi_le_s1_agent:m0_readdatavalid
	wire         pio_spi_le_s1_agent_m0_lock;                                                 // pio_spi_le_s1_agent:m0_lock -> pio_spi_le_s1_translator:uav_lock
	wire  [31:0] pio_spi_le_s1_agent_m0_writedata;                                            // pio_spi_le_s1_agent:m0_writedata -> pio_spi_le_s1_translator:uav_writedata
	wire         pio_spi_le_s1_agent_m0_write;                                                // pio_spi_le_s1_agent:m0_write -> pio_spi_le_s1_translator:uav_write
	wire   [2:0] pio_spi_le_s1_agent_m0_burstcount;                                           // pio_spi_le_s1_agent:m0_burstcount -> pio_spi_le_s1_translator:uav_burstcount
	wire         pio_spi_le_s1_agent_rf_source_valid;                                         // pio_spi_le_s1_agent:rf_source_valid -> pio_spi_le_s1_agent_rsp_fifo:in_valid
	wire  [96:0] pio_spi_le_s1_agent_rf_source_data;                                          // pio_spi_le_s1_agent:rf_source_data -> pio_spi_le_s1_agent_rsp_fifo:in_data
	wire         pio_spi_le_s1_agent_rf_source_ready;                                         // pio_spi_le_s1_agent_rsp_fifo:in_ready -> pio_spi_le_s1_agent:rf_source_ready
	wire         pio_spi_le_s1_agent_rf_source_startofpacket;                                 // pio_spi_le_s1_agent:rf_source_startofpacket -> pio_spi_le_s1_agent_rsp_fifo:in_startofpacket
	wire         pio_spi_le_s1_agent_rf_source_endofpacket;                                   // pio_spi_le_s1_agent:rf_source_endofpacket -> pio_spi_le_s1_agent_rsp_fifo:in_endofpacket
	wire         pio_spi_le_s1_agent_rsp_fifo_out_valid;                                      // pio_spi_le_s1_agent_rsp_fifo:out_valid -> pio_spi_le_s1_agent:rf_sink_valid
	wire  [96:0] pio_spi_le_s1_agent_rsp_fifo_out_data;                                       // pio_spi_le_s1_agent_rsp_fifo:out_data -> pio_spi_le_s1_agent:rf_sink_data
	wire         pio_spi_le_s1_agent_rsp_fifo_out_ready;                                      // pio_spi_le_s1_agent:rf_sink_ready -> pio_spi_le_s1_agent_rsp_fifo:out_ready
	wire         pio_spi_le_s1_agent_rsp_fifo_out_startofpacket;                              // pio_spi_le_s1_agent_rsp_fifo:out_startofpacket -> pio_spi_le_s1_agent:rf_sink_startofpacket
	wire         pio_spi_le_s1_agent_rsp_fifo_out_endofpacket;                                // pio_spi_le_s1_agent_rsp_fifo:out_endofpacket -> pio_spi_le_s1_agent:rf_sink_endofpacket
	wire         pio_spi_le_s1_agent_rdata_fifo_src_valid;                                    // pio_spi_le_s1_agent:rdata_fifo_src_valid -> pio_spi_le_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] pio_spi_le_s1_agent_rdata_fifo_src_data;                                     // pio_spi_le_s1_agent:rdata_fifo_src_data -> pio_spi_le_s1_agent:rdata_fifo_sink_data
	wire         pio_spi_le_s1_agent_rdata_fifo_src_ready;                                    // pio_spi_le_s1_agent:rdata_fifo_sink_ready -> pio_spi_le_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_012_src_valid;                                                       // cmd_mux_012:src_valid -> pio_spi_le_s1_agent:cp_valid
	wire  [95:0] cmd_mux_012_src_data;                                                        // cmd_mux_012:src_data -> pio_spi_le_s1_agent:cp_data
	wire         cmd_mux_012_src_ready;                                                       // pio_spi_le_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire  [13:0] cmd_mux_012_src_channel;                                                     // cmd_mux_012:src_channel -> pio_spi_le_s1_agent:cp_channel
	wire         cmd_mux_012_src_startofpacket;                                               // cmd_mux_012:src_startofpacket -> pio_spi_le_s1_agent:cp_startofpacket
	wire         cmd_mux_012_src_endofpacket;                                                 // cmd_mux_012:src_endofpacket -> pio_spi_le_s1_agent:cp_endofpacket
	wire  [31:0] uart_0_s1_agent_m0_readdata;                                                 // uart_0_s1_translator:uav_readdata -> uart_0_s1_agent:m0_readdata
	wire         uart_0_s1_agent_m0_waitrequest;                                              // uart_0_s1_translator:uav_waitrequest -> uart_0_s1_agent:m0_waitrequest
	wire         uart_0_s1_agent_m0_debugaccess;                                              // uart_0_s1_agent:m0_debugaccess -> uart_0_s1_translator:uav_debugaccess
	wire  [17:0] uart_0_s1_agent_m0_address;                                                  // uart_0_s1_agent:m0_address -> uart_0_s1_translator:uav_address
	wire   [3:0] uart_0_s1_agent_m0_byteenable;                                               // uart_0_s1_agent:m0_byteenable -> uart_0_s1_translator:uav_byteenable
	wire         uart_0_s1_agent_m0_read;                                                     // uart_0_s1_agent:m0_read -> uart_0_s1_translator:uav_read
	wire         uart_0_s1_agent_m0_readdatavalid;                                            // uart_0_s1_translator:uav_readdatavalid -> uart_0_s1_agent:m0_readdatavalid
	wire         uart_0_s1_agent_m0_lock;                                                     // uart_0_s1_agent:m0_lock -> uart_0_s1_translator:uav_lock
	wire  [31:0] uart_0_s1_agent_m0_writedata;                                                // uart_0_s1_agent:m0_writedata -> uart_0_s1_translator:uav_writedata
	wire         uart_0_s1_agent_m0_write;                                                    // uart_0_s1_agent:m0_write -> uart_0_s1_translator:uav_write
	wire   [2:0] uart_0_s1_agent_m0_burstcount;                                               // uart_0_s1_agent:m0_burstcount -> uart_0_s1_translator:uav_burstcount
	wire         uart_0_s1_agent_rf_source_valid;                                             // uart_0_s1_agent:rf_source_valid -> uart_0_s1_agent_rsp_fifo:in_valid
	wire  [96:0] uart_0_s1_agent_rf_source_data;                                              // uart_0_s1_agent:rf_source_data -> uart_0_s1_agent_rsp_fifo:in_data
	wire         uart_0_s1_agent_rf_source_ready;                                             // uart_0_s1_agent_rsp_fifo:in_ready -> uart_0_s1_agent:rf_source_ready
	wire         uart_0_s1_agent_rf_source_startofpacket;                                     // uart_0_s1_agent:rf_source_startofpacket -> uart_0_s1_agent_rsp_fifo:in_startofpacket
	wire         uart_0_s1_agent_rf_source_endofpacket;                                       // uart_0_s1_agent:rf_source_endofpacket -> uart_0_s1_agent_rsp_fifo:in_endofpacket
	wire         uart_0_s1_agent_rsp_fifo_out_valid;                                          // uart_0_s1_agent_rsp_fifo:out_valid -> uart_0_s1_agent:rf_sink_valid
	wire  [96:0] uart_0_s1_agent_rsp_fifo_out_data;                                           // uart_0_s1_agent_rsp_fifo:out_data -> uart_0_s1_agent:rf_sink_data
	wire         uart_0_s1_agent_rsp_fifo_out_ready;                                          // uart_0_s1_agent:rf_sink_ready -> uart_0_s1_agent_rsp_fifo:out_ready
	wire         uart_0_s1_agent_rsp_fifo_out_startofpacket;                                  // uart_0_s1_agent_rsp_fifo:out_startofpacket -> uart_0_s1_agent:rf_sink_startofpacket
	wire         uart_0_s1_agent_rsp_fifo_out_endofpacket;                                    // uart_0_s1_agent_rsp_fifo:out_endofpacket -> uart_0_s1_agent:rf_sink_endofpacket
	wire         uart_0_s1_agent_rdata_fifo_src_valid;                                        // uart_0_s1_agent:rdata_fifo_src_valid -> uart_0_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] uart_0_s1_agent_rdata_fifo_src_data;                                         // uart_0_s1_agent:rdata_fifo_src_data -> uart_0_s1_agent:rdata_fifo_sink_data
	wire         uart_0_s1_agent_rdata_fifo_src_ready;                                        // uart_0_s1_agent:rdata_fifo_sink_ready -> uart_0_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_013_src_valid;                                                       // cmd_mux_013:src_valid -> uart_0_s1_agent:cp_valid
	wire  [95:0] cmd_mux_013_src_data;                                                        // cmd_mux_013:src_data -> uart_0_s1_agent:cp_data
	wire         cmd_mux_013_src_ready;                                                       // uart_0_s1_agent:cp_ready -> cmd_mux_013:src_ready
	wire  [13:0] cmd_mux_013_src_channel;                                                     // cmd_mux_013:src_channel -> uart_0_s1_agent:cp_channel
	wire         cmd_mux_013_src_startofpacket;                                               // cmd_mux_013:src_startofpacket -> uart_0_s1_agent:cp_startofpacket
	wire         cmd_mux_013_src_endofpacket;                                                 // cmd_mux_013:src_endofpacket -> uart_0_s1_agent:cp_endofpacket
	wire         cpu_0_data_master_agent_cp_valid;                                            // cpu_0_data_master_agent:cp_valid -> router:sink_valid
	wire  [95:0] cpu_0_data_master_agent_cp_data;                                             // cpu_0_data_master_agent:cp_data -> router:sink_data
	wire         cpu_0_data_master_agent_cp_ready;                                            // router:sink_ready -> cpu_0_data_master_agent:cp_ready
	wire         cpu_0_data_master_agent_cp_startofpacket;                                    // cpu_0_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire         cpu_0_data_master_agent_cp_endofpacket;                                      // cpu_0_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire         router_src_valid;                                                            // router:src_valid -> cmd_demux:sink_valid
	wire  [95:0] router_src_data;                                                             // router:src_data -> cmd_demux:sink_data
	wire         router_src_ready;                                                            // cmd_demux:sink_ready -> router:src_ready
	wire  [13:0] router_src_channel;                                                          // router:src_channel -> cmd_demux:sink_channel
	wire         router_src_startofpacket;                                                    // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire         router_src_endofpacket;                                                      // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire         cpu_0_instruction_master_agent_cp_valid;                                     // cpu_0_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [95:0] cpu_0_instruction_master_agent_cp_data;                                      // cpu_0_instruction_master_agent:cp_data -> router_001:sink_data
	wire         cpu_0_instruction_master_agent_cp_ready;                                     // router_001:sink_ready -> cpu_0_instruction_master_agent:cp_ready
	wire         cpu_0_instruction_master_agent_cp_startofpacket;                             // cpu_0_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire         cpu_0_instruction_master_agent_cp_endofpacket;                               // cpu_0_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire         epcs_flash_controller_0_epcs_control_port_agent_rp_valid;                    // epcs_flash_controller_0_epcs_control_port_agent:rp_valid -> router_002:sink_valid
	wire  [95:0] epcs_flash_controller_0_epcs_control_port_agent_rp_data;                     // epcs_flash_controller_0_epcs_control_port_agent:rp_data -> router_002:sink_data
	wire         epcs_flash_controller_0_epcs_control_port_agent_rp_ready;                    // router_002:sink_ready -> epcs_flash_controller_0_epcs_control_port_agent:rp_ready
	wire         epcs_flash_controller_0_epcs_control_port_agent_rp_startofpacket;            // epcs_flash_controller_0_epcs_control_port_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         epcs_flash_controller_0_epcs_control_port_agent_rp_endofpacket;              // epcs_flash_controller_0_epcs_control_port_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         router_002_src_valid;                                                        // router_002:src_valid -> rsp_demux:sink_valid
	wire  [95:0] router_002_src_data;                                                         // router_002:src_data -> rsp_demux:sink_data
	wire         router_002_src_ready;                                                        // rsp_demux:sink_ready -> router_002:src_ready
	wire  [13:0] router_002_src_channel;                                                      // router_002:src_channel -> rsp_demux:sink_channel
	wire         router_002_src_startofpacket;                                                // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_002_src_endofpacket;                                                  // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         cpu_0_jtag_debug_module_agent_rp_valid;                                      // cpu_0_jtag_debug_module_agent:rp_valid -> router_003:sink_valid
	wire  [95:0] cpu_0_jtag_debug_module_agent_rp_data;                                       // cpu_0_jtag_debug_module_agent:rp_data -> router_003:sink_data
	wire         cpu_0_jtag_debug_module_agent_rp_ready;                                      // router_003:sink_ready -> cpu_0_jtag_debug_module_agent:rp_ready
	wire         cpu_0_jtag_debug_module_agent_rp_startofpacket;                              // cpu_0_jtag_debug_module_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire         cpu_0_jtag_debug_module_agent_rp_endofpacket;                                // cpu_0_jtag_debug_module_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         router_003_src_valid;                                                        // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [95:0] router_003_src_data;                                                         // router_003:src_data -> rsp_demux_001:sink_data
	wire         router_003_src_ready;                                                        // rsp_demux_001:sink_ready -> router_003:src_ready
	wire  [13:0] router_003_src_channel;                                                      // router_003:src_channel -> rsp_demux_001:sink_channel
	wire         router_003_src_startofpacket;                                                // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         router_003_src_endofpacket;                                                  // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         onchip_memory2_0_s1_agent_rp_valid;                                          // onchip_memory2_0_s1_agent:rp_valid -> router_004:sink_valid
	wire  [95:0] onchip_memory2_0_s1_agent_rp_data;                                           // onchip_memory2_0_s1_agent:rp_data -> router_004:sink_data
	wire         onchip_memory2_0_s1_agent_rp_ready;                                          // router_004:sink_ready -> onchip_memory2_0_s1_agent:rp_ready
	wire         onchip_memory2_0_s1_agent_rp_startofpacket;                                  // onchip_memory2_0_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire         onchip_memory2_0_s1_agent_rp_endofpacket;                                    // onchip_memory2_0_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire         router_004_src_valid;                                                        // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [95:0] router_004_src_data;                                                         // router_004:src_data -> rsp_demux_002:sink_data
	wire         router_004_src_ready;                                                        // rsp_demux_002:sink_ready -> router_004:src_ready
	wire  [13:0] router_004_src_channel;                                                      // router_004:src_channel -> rsp_demux_002:sink_channel
	wire         router_004_src_startofpacket;                                                // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire         router_004_src_endofpacket;                                                  // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         uart_s1_agent_rp_valid;                                                      // uart_s1_agent:rp_valid -> router_005:sink_valid
	wire  [95:0] uart_s1_agent_rp_data;                                                       // uart_s1_agent:rp_data -> router_005:sink_data
	wire         uart_s1_agent_rp_ready;                                                      // router_005:sink_ready -> uart_s1_agent:rp_ready
	wire         uart_s1_agent_rp_startofpacket;                                              // uart_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire         uart_s1_agent_rp_endofpacket;                                                // uart_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire         router_005_src_valid;                                                        // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [95:0] router_005_src_data;                                                         // router_005:src_data -> rsp_demux_003:sink_data
	wire         router_005_src_ready;                                                        // rsp_demux_003:sink_ready -> router_005:src_ready
	wire  [13:0] router_005_src_channel;                                                      // router_005:src_channel -> rsp_demux_003:sink_channel
	wire         router_005_src_startofpacket;                                                // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire         router_005_src_endofpacket;                                                  // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire         pio_addr_s1_agent_rp_valid;                                                  // pio_addr_s1_agent:rp_valid -> router_006:sink_valid
	wire  [95:0] pio_addr_s1_agent_rp_data;                                                   // pio_addr_s1_agent:rp_data -> router_006:sink_data
	wire         pio_addr_s1_agent_rp_ready;                                                  // router_006:sink_ready -> pio_addr_s1_agent:rp_ready
	wire         pio_addr_s1_agent_rp_startofpacket;                                          // pio_addr_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire         pio_addr_s1_agent_rp_endofpacket;                                            // pio_addr_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire         router_006_src_valid;                                                        // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [95:0] router_006_src_data;                                                         // router_006:src_data -> rsp_demux_004:sink_data
	wire         router_006_src_ready;                                                        // rsp_demux_004:sink_ready -> router_006:src_ready
	wire  [13:0] router_006_src_channel;                                                      // router_006:src_channel -> rsp_demux_004:sink_channel
	wire         router_006_src_startofpacket;                                                // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire         router_006_src_endofpacket;                                                  // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire         pio_data_s1_agent_rp_valid;                                                  // pio_data_s1_agent:rp_valid -> router_007:sink_valid
	wire  [95:0] pio_data_s1_agent_rp_data;                                                   // pio_data_s1_agent:rp_data -> router_007:sink_data
	wire         pio_data_s1_agent_rp_ready;                                                  // router_007:sink_ready -> pio_data_s1_agent:rp_ready
	wire         pio_data_s1_agent_rp_startofpacket;                                          // pio_data_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire         pio_data_s1_agent_rp_endofpacket;                                            // pio_data_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire         router_007_src_valid;                                                        // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [95:0] router_007_src_data;                                                         // router_007:src_data -> rsp_demux_005:sink_data
	wire         router_007_src_ready;                                                        // rsp_demux_005:sink_ready -> router_007:src_ready
	wire  [13:0] router_007_src_channel;                                                      // router_007:src_channel -> rsp_demux_005:sink_channel
	wire         router_007_src_startofpacket;                                                // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire         router_007_src_endofpacket;                                                  // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire         pio_clk_s1_agent_rp_valid;                                                   // pio_clk_s1_agent:rp_valid -> router_008:sink_valid
	wire  [95:0] pio_clk_s1_agent_rp_data;                                                    // pio_clk_s1_agent:rp_data -> router_008:sink_data
	wire         pio_clk_s1_agent_rp_ready;                                                   // router_008:sink_ready -> pio_clk_s1_agent:rp_ready
	wire         pio_clk_s1_agent_rp_startofpacket;                                           // pio_clk_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire         pio_clk_s1_agent_rp_endofpacket;                                             // pio_clk_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire         router_008_src_valid;                                                        // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [95:0] router_008_src_data;                                                         // router_008:src_data -> rsp_demux_006:sink_data
	wire         router_008_src_ready;                                                        // rsp_demux_006:sink_ready -> router_008:src_ready
	wire  [13:0] router_008_src_channel;                                                      // router_008:src_channel -> rsp_demux_006:sink_channel
	wire         router_008_src_startofpacket;                                                // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire         router_008_src_endofpacket;                                                  // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire         pio_ctr_out_s1_agent_rp_valid;                                               // pio_ctr_out_s1_agent:rp_valid -> router_009:sink_valid
	wire  [95:0] pio_ctr_out_s1_agent_rp_data;                                                // pio_ctr_out_s1_agent:rp_data -> router_009:sink_data
	wire         pio_ctr_out_s1_agent_rp_ready;                                               // router_009:sink_ready -> pio_ctr_out_s1_agent:rp_ready
	wire         pio_ctr_out_s1_agent_rp_startofpacket;                                       // pio_ctr_out_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire         pio_ctr_out_s1_agent_rp_endofpacket;                                         // pio_ctr_out_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire         router_009_src_valid;                                                        // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [95:0] router_009_src_data;                                                         // router_009:src_data -> rsp_demux_007:sink_data
	wire         router_009_src_ready;                                                        // rsp_demux_007:sink_ready -> router_009:src_ready
	wire  [13:0] router_009_src_channel;                                                      // router_009:src_channel -> rsp_demux_007:sink_channel
	wire         router_009_src_startofpacket;                                                // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire         router_009_src_endofpacket;                                                  // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire         pio_reset_s1_agent_rp_valid;                                                 // pio_reset_s1_agent:rp_valid -> router_010:sink_valid
	wire  [95:0] pio_reset_s1_agent_rp_data;                                                  // pio_reset_s1_agent:rp_data -> router_010:sink_data
	wire         pio_reset_s1_agent_rp_ready;                                                 // router_010:sink_ready -> pio_reset_s1_agent:rp_ready
	wire         pio_reset_s1_agent_rp_startofpacket;                                         // pio_reset_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire         pio_reset_s1_agent_rp_endofpacket;                                           // pio_reset_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire         router_010_src_valid;                                                        // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [95:0] router_010_src_data;                                                         // router_010:src_data -> rsp_demux_008:sink_data
	wire         router_010_src_ready;                                                        // rsp_demux_008:sink_ready -> router_010:src_ready
	wire  [13:0] router_010_src_channel;                                                      // router_010:src_channel -> rsp_demux_008:sink_channel
	wire         router_010_src_startofpacket;                                                // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire         router_010_src_endofpacket;                                                  // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire         pio_spi_clk_s1_agent_rp_valid;                                               // pio_spi_clk_s1_agent:rp_valid -> router_011:sink_valid
	wire  [95:0] pio_spi_clk_s1_agent_rp_data;                                                // pio_spi_clk_s1_agent:rp_data -> router_011:sink_data
	wire         pio_spi_clk_s1_agent_rp_ready;                                               // router_011:sink_ready -> pio_spi_clk_s1_agent:rp_ready
	wire         pio_spi_clk_s1_agent_rp_startofpacket;                                       // pio_spi_clk_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire         pio_spi_clk_s1_agent_rp_endofpacket;                                         // pio_spi_clk_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire         router_011_src_valid;                                                        // router_011:src_valid -> rsp_demux_009:sink_valid
	wire  [95:0] router_011_src_data;                                                         // router_011:src_data -> rsp_demux_009:sink_data
	wire         router_011_src_ready;                                                        // rsp_demux_009:sink_ready -> router_011:src_ready
	wire  [13:0] router_011_src_channel;                                                      // router_011:src_channel -> rsp_demux_009:sink_channel
	wire         router_011_src_startofpacket;                                                // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire         router_011_src_endofpacket;                                                  // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire         pio_spi_di_s1_agent_rp_valid;                                                // pio_spi_di_s1_agent:rp_valid -> router_012:sink_valid
	wire  [95:0] pio_spi_di_s1_agent_rp_data;                                                 // pio_spi_di_s1_agent:rp_data -> router_012:sink_data
	wire         pio_spi_di_s1_agent_rp_ready;                                                // router_012:sink_ready -> pio_spi_di_s1_agent:rp_ready
	wire         pio_spi_di_s1_agent_rp_startofpacket;                                        // pio_spi_di_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire         pio_spi_di_s1_agent_rp_endofpacket;                                          // pio_spi_di_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire         router_012_src_valid;                                                        // router_012:src_valid -> rsp_demux_010:sink_valid
	wire  [95:0] router_012_src_data;                                                         // router_012:src_data -> rsp_demux_010:sink_data
	wire         router_012_src_ready;                                                        // rsp_demux_010:sink_ready -> router_012:src_ready
	wire  [13:0] router_012_src_channel;                                                      // router_012:src_channel -> rsp_demux_010:sink_channel
	wire         router_012_src_startofpacket;                                                // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire         router_012_src_endofpacket;                                                  // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire         pio_spi_do_s1_agent_rp_valid;                                                // pio_spi_do_s1_agent:rp_valid -> router_013:sink_valid
	wire  [95:0] pio_spi_do_s1_agent_rp_data;                                                 // pio_spi_do_s1_agent:rp_data -> router_013:sink_data
	wire         pio_spi_do_s1_agent_rp_ready;                                                // router_013:sink_ready -> pio_spi_do_s1_agent:rp_ready
	wire         pio_spi_do_s1_agent_rp_startofpacket;                                        // pio_spi_do_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire         pio_spi_do_s1_agent_rp_endofpacket;                                          // pio_spi_do_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire         router_013_src_valid;                                                        // router_013:src_valid -> rsp_demux_011:sink_valid
	wire  [95:0] router_013_src_data;                                                         // router_013:src_data -> rsp_demux_011:sink_data
	wire         router_013_src_ready;                                                        // rsp_demux_011:sink_ready -> router_013:src_ready
	wire  [13:0] router_013_src_channel;                                                      // router_013:src_channel -> rsp_demux_011:sink_channel
	wire         router_013_src_startofpacket;                                                // router_013:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire         router_013_src_endofpacket;                                                  // router_013:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire         pio_spi_le_s1_agent_rp_valid;                                                // pio_spi_le_s1_agent:rp_valid -> router_014:sink_valid
	wire  [95:0] pio_spi_le_s1_agent_rp_data;                                                 // pio_spi_le_s1_agent:rp_data -> router_014:sink_data
	wire         pio_spi_le_s1_agent_rp_ready;                                                // router_014:sink_ready -> pio_spi_le_s1_agent:rp_ready
	wire         pio_spi_le_s1_agent_rp_startofpacket;                                        // pio_spi_le_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire         pio_spi_le_s1_agent_rp_endofpacket;                                          // pio_spi_le_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire         router_014_src_valid;                                                        // router_014:src_valid -> rsp_demux_012:sink_valid
	wire  [95:0] router_014_src_data;                                                         // router_014:src_data -> rsp_demux_012:sink_data
	wire         router_014_src_ready;                                                        // rsp_demux_012:sink_ready -> router_014:src_ready
	wire  [13:0] router_014_src_channel;                                                      // router_014:src_channel -> rsp_demux_012:sink_channel
	wire         router_014_src_startofpacket;                                                // router_014:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire         router_014_src_endofpacket;                                                  // router_014:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire         uart_0_s1_agent_rp_valid;                                                    // uart_0_s1_agent:rp_valid -> router_015:sink_valid
	wire  [95:0] uart_0_s1_agent_rp_data;                                                     // uart_0_s1_agent:rp_data -> router_015:sink_data
	wire         uart_0_s1_agent_rp_ready;                                                    // router_015:sink_ready -> uart_0_s1_agent:rp_ready
	wire         uart_0_s1_agent_rp_startofpacket;                                            // uart_0_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire         uart_0_s1_agent_rp_endofpacket;                                              // uart_0_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire         router_015_src_valid;                                                        // router_015:src_valid -> rsp_demux_013:sink_valid
	wire  [95:0] router_015_src_data;                                                         // router_015:src_data -> rsp_demux_013:sink_data
	wire         router_015_src_ready;                                                        // rsp_demux_013:sink_ready -> router_015:src_ready
	wire  [13:0] router_015_src_channel;                                                      // router_015:src_channel -> rsp_demux_013:sink_channel
	wire         router_015_src_startofpacket;                                                // router_015:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire         router_015_src_endofpacket;                                                  // router_015:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire         router_001_src_valid;                                                        // router_001:src_valid -> cpu_0_instruction_master_limiter:cmd_sink_valid
	wire  [95:0] router_001_src_data;                                                         // router_001:src_data -> cpu_0_instruction_master_limiter:cmd_sink_data
	wire         router_001_src_ready;                                                        // cpu_0_instruction_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire  [13:0] router_001_src_channel;                                                      // router_001:src_channel -> cpu_0_instruction_master_limiter:cmd_sink_channel
	wire         router_001_src_startofpacket;                                                // router_001:src_startofpacket -> cpu_0_instruction_master_limiter:cmd_sink_startofpacket
	wire         router_001_src_endofpacket;                                                  // router_001:src_endofpacket -> cpu_0_instruction_master_limiter:cmd_sink_endofpacket
	wire  [95:0] cpu_0_instruction_master_limiter_cmd_src_data;                               // cpu_0_instruction_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire         cpu_0_instruction_master_limiter_cmd_src_ready;                              // cmd_demux_001:sink_ready -> cpu_0_instruction_master_limiter:cmd_src_ready
	wire  [13:0] cpu_0_instruction_master_limiter_cmd_src_channel;                            // cpu_0_instruction_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire         cpu_0_instruction_master_limiter_cmd_src_startofpacket;                      // cpu_0_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire         cpu_0_instruction_master_limiter_cmd_src_endofpacket;                        // cpu_0_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire         rsp_mux_001_src_valid;                                                       // rsp_mux_001:src_valid -> cpu_0_instruction_master_limiter:rsp_sink_valid
	wire  [95:0] rsp_mux_001_src_data;                                                        // rsp_mux_001:src_data -> cpu_0_instruction_master_limiter:rsp_sink_data
	wire         rsp_mux_001_src_ready;                                                       // cpu_0_instruction_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire  [13:0] rsp_mux_001_src_channel;                                                     // rsp_mux_001:src_channel -> cpu_0_instruction_master_limiter:rsp_sink_channel
	wire         rsp_mux_001_src_startofpacket;                                               // rsp_mux_001:src_startofpacket -> cpu_0_instruction_master_limiter:rsp_sink_startofpacket
	wire         rsp_mux_001_src_endofpacket;                                                 // rsp_mux_001:src_endofpacket -> cpu_0_instruction_master_limiter:rsp_sink_endofpacket
	wire         cpu_0_instruction_master_limiter_rsp_src_valid;                              // cpu_0_instruction_master_limiter:rsp_src_valid -> cpu_0_instruction_master_agent:rp_valid
	wire  [95:0] cpu_0_instruction_master_limiter_rsp_src_data;                               // cpu_0_instruction_master_limiter:rsp_src_data -> cpu_0_instruction_master_agent:rp_data
	wire         cpu_0_instruction_master_limiter_rsp_src_ready;                              // cpu_0_instruction_master_agent:rp_ready -> cpu_0_instruction_master_limiter:rsp_src_ready
	wire  [13:0] cpu_0_instruction_master_limiter_rsp_src_channel;                            // cpu_0_instruction_master_limiter:rsp_src_channel -> cpu_0_instruction_master_agent:rp_channel
	wire         cpu_0_instruction_master_limiter_rsp_src_startofpacket;                      // cpu_0_instruction_master_limiter:rsp_src_startofpacket -> cpu_0_instruction_master_agent:rp_startofpacket
	wire         cpu_0_instruction_master_limiter_rsp_src_endofpacket;                        // cpu_0_instruction_master_limiter:rsp_src_endofpacket -> cpu_0_instruction_master_agent:rp_endofpacket
	wire         cmd_demux_src0_valid;                                                        // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [95:0] cmd_demux_src0_data;                                                         // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                                        // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire  [13:0] cmd_demux_src0_channel;                                                      // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                                // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                                  // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                                        // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [95:0] cmd_demux_src1_data;                                                         // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire         cmd_demux_src1_ready;                                                        // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire  [13:0] cmd_demux_src1_channel;                                                      // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_startofpacket;                                                // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         cmd_demux_src1_endofpacket;                                                  // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src2_valid;                                                        // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [95:0] cmd_demux_src2_data;                                                         // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire         cmd_demux_src2_ready;                                                        // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire  [13:0] cmd_demux_src2_channel;                                                      // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire         cmd_demux_src2_startofpacket;                                                // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire         cmd_demux_src2_endofpacket;                                                  // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         cmd_demux_src3_valid;                                                        // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [95:0] cmd_demux_src3_data;                                                         // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire         cmd_demux_src3_ready;                                                        // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire  [13:0] cmd_demux_src3_channel;                                                      // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire         cmd_demux_src3_startofpacket;                                                // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire         cmd_demux_src3_endofpacket;                                                  // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire         cmd_demux_src4_valid;                                                        // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [95:0] cmd_demux_src4_data;                                                         // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire         cmd_demux_src4_ready;                                                        // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire  [13:0] cmd_demux_src4_channel;                                                      // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire         cmd_demux_src4_startofpacket;                                                // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire         cmd_demux_src4_endofpacket;                                                  // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire         cmd_demux_src5_valid;                                                        // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [95:0] cmd_demux_src5_data;                                                         // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire         cmd_demux_src5_ready;                                                        // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire  [13:0] cmd_demux_src5_channel;                                                      // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire         cmd_demux_src5_startofpacket;                                                // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire         cmd_demux_src5_endofpacket;                                                  // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire         cmd_demux_src6_valid;                                                        // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [95:0] cmd_demux_src6_data;                                                         // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire         cmd_demux_src6_ready;                                                        // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire  [13:0] cmd_demux_src6_channel;                                                      // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire         cmd_demux_src6_startofpacket;                                                // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire         cmd_demux_src6_endofpacket;                                                  // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire         cmd_demux_src7_valid;                                                        // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [95:0] cmd_demux_src7_data;                                                         // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire         cmd_demux_src7_ready;                                                        // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire  [13:0] cmd_demux_src7_channel;                                                      // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire         cmd_demux_src7_startofpacket;                                                // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire         cmd_demux_src7_endofpacket;                                                  // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire         cmd_demux_src8_valid;                                                        // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [95:0] cmd_demux_src8_data;                                                         // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire         cmd_demux_src8_ready;                                                        // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire  [13:0] cmd_demux_src8_channel;                                                      // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire         cmd_demux_src8_startofpacket;                                                // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire         cmd_demux_src8_endofpacket;                                                  // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire         cmd_demux_src9_valid;                                                        // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [95:0] cmd_demux_src9_data;                                                         // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire         cmd_demux_src9_ready;                                                        // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire  [13:0] cmd_demux_src9_channel;                                                      // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire         cmd_demux_src9_startofpacket;                                                // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire         cmd_demux_src9_endofpacket;                                                  // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire         cmd_demux_src10_valid;                                                       // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [95:0] cmd_demux_src10_data;                                                        // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire         cmd_demux_src10_ready;                                                       // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire  [13:0] cmd_demux_src10_channel;                                                     // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire         cmd_demux_src10_startofpacket;                                               // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire         cmd_demux_src10_endofpacket;                                                 // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire         cmd_demux_src11_valid;                                                       // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [95:0] cmd_demux_src11_data;                                                        // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire         cmd_demux_src11_ready;                                                       // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire  [13:0] cmd_demux_src11_channel;                                                     // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire         cmd_demux_src11_startofpacket;                                               // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire         cmd_demux_src11_endofpacket;                                                 // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire         cmd_demux_src12_valid;                                                       // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [95:0] cmd_demux_src12_data;                                                        // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire         cmd_demux_src12_ready;                                                       // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire  [13:0] cmd_demux_src12_channel;                                                     // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire         cmd_demux_src12_startofpacket;                                               // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire         cmd_demux_src12_endofpacket;                                                 // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire         cmd_demux_src13_valid;                                                       // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire  [95:0] cmd_demux_src13_data;                                                        // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire         cmd_demux_src13_ready;                                                       // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire  [13:0] cmd_demux_src13_channel;                                                     // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire         cmd_demux_src13_startofpacket;                                               // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire         cmd_demux_src13_endofpacket;                                                 // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire         cmd_demux_001_src0_valid;                                                    // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [95:0] cmd_demux_001_src0_data;                                                     // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire         cmd_demux_001_src0_ready;                                                    // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire  [13:0] cmd_demux_001_src0_channel;                                                  // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire         cmd_demux_001_src0_startofpacket;                                            // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire         cmd_demux_001_src0_endofpacket;                                              // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire         cmd_demux_001_src1_valid;                                                    // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [95:0] cmd_demux_001_src1_data;                                                     // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire         cmd_demux_001_src1_ready;                                                    // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire  [13:0] cmd_demux_001_src1_channel;                                                  // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire         cmd_demux_001_src1_startofpacket;                                            // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire         cmd_demux_001_src1_endofpacket;                                              // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire         cmd_demux_001_src2_valid;                                                    // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [95:0] cmd_demux_001_src2_data;                                                     // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire         cmd_demux_001_src2_ready;                                                    // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire  [13:0] cmd_demux_001_src2_channel;                                                  // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire         cmd_demux_001_src2_startofpacket;                                            // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire         cmd_demux_001_src2_endofpacket;                                              // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire         rsp_demux_src0_valid;                                                        // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [95:0] rsp_demux_src0_data;                                                         // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                                        // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire  [13:0] rsp_demux_src0_channel;                                                      // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                                // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                                  // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_src1_valid;                                                        // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [95:0] rsp_demux_src1_data;                                                         // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire         rsp_demux_src1_ready;                                                        // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire  [13:0] rsp_demux_src1_channel;                                                      // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire         rsp_demux_src1_startofpacket;                                                // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire         rsp_demux_src1_endofpacket;                                                  // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                                    // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [95:0] rsp_demux_001_src0_data;                                                     // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire         rsp_demux_001_src0_ready;                                                    // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire  [13:0] rsp_demux_001_src0_channel;                                                  // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_startofpacket;                                            // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                              // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_001_src1_valid;                                                    // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [95:0] rsp_demux_001_src1_data;                                                     // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire         rsp_demux_001_src1_ready;                                                    // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire  [13:0] rsp_demux_001_src1_channel;                                                  // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire         rsp_demux_001_src1_startofpacket;                                            // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire         rsp_demux_001_src1_endofpacket;                                              // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire         rsp_demux_002_src0_valid;                                                    // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [95:0] rsp_demux_002_src0_data;                                                     // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire         rsp_demux_002_src0_ready;                                                    // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire  [13:0] rsp_demux_002_src0_channel;                                                  // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire         rsp_demux_002_src0_startofpacket;                                            // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire         rsp_demux_002_src0_endofpacket;                                              // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire         rsp_demux_002_src1_valid;                                                    // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [95:0] rsp_demux_002_src1_data;                                                     // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire         rsp_demux_002_src1_ready;                                                    // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire  [13:0] rsp_demux_002_src1_channel;                                                  // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire         rsp_demux_002_src1_startofpacket;                                            // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire         rsp_demux_002_src1_endofpacket;                                              // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire         rsp_demux_003_src0_valid;                                                    // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [95:0] rsp_demux_003_src0_data;                                                     // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire         rsp_demux_003_src0_ready;                                                    // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire  [13:0] rsp_demux_003_src0_channel;                                                  // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire         rsp_demux_003_src0_startofpacket;                                            // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire         rsp_demux_003_src0_endofpacket;                                              // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire         rsp_demux_004_src0_valid;                                                    // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [95:0] rsp_demux_004_src0_data;                                                     // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire         rsp_demux_004_src0_ready;                                                    // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire  [13:0] rsp_demux_004_src0_channel;                                                  // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire         rsp_demux_004_src0_startofpacket;                                            // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire         rsp_demux_004_src0_endofpacket;                                              // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire         rsp_demux_005_src0_valid;                                                    // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [95:0] rsp_demux_005_src0_data;                                                     // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire         rsp_demux_005_src0_ready;                                                    // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire  [13:0] rsp_demux_005_src0_channel;                                                  // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire         rsp_demux_005_src0_startofpacket;                                            // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire         rsp_demux_005_src0_endofpacket;                                              // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire         rsp_demux_006_src0_valid;                                                    // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [95:0] rsp_demux_006_src0_data;                                                     // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire         rsp_demux_006_src0_ready;                                                    // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire  [13:0] rsp_demux_006_src0_channel;                                                  // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire         rsp_demux_006_src0_startofpacket;                                            // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire         rsp_demux_006_src0_endofpacket;                                              // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire         rsp_demux_007_src0_valid;                                                    // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [95:0] rsp_demux_007_src0_data;                                                     // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire         rsp_demux_007_src0_ready;                                                    // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire  [13:0] rsp_demux_007_src0_channel;                                                  // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire         rsp_demux_007_src0_startofpacket;                                            // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire         rsp_demux_007_src0_endofpacket;                                              // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire         rsp_demux_008_src0_valid;                                                    // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [95:0] rsp_demux_008_src0_data;                                                     // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire         rsp_demux_008_src0_ready;                                                    // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire  [13:0] rsp_demux_008_src0_channel;                                                  // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire         rsp_demux_008_src0_startofpacket;                                            // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire         rsp_demux_008_src0_endofpacket;                                              // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire         rsp_demux_009_src0_valid;                                                    // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [95:0] rsp_demux_009_src0_data;                                                     // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire         rsp_demux_009_src0_ready;                                                    // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire  [13:0] rsp_demux_009_src0_channel;                                                  // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire         rsp_demux_009_src0_startofpacket;                                            // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire         rsp_demux_009_src0_endofpacket;                                              // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire         rsp_demux_010_src0_valid;                                                    // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [95:0] rsp_demux_010_src0_data;                                                     // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire         rsp_demux_010_src0_ready;                                                    // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire  [13:0] rsp_demux_010_src0_channel;                                                  // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire         rsp_demux_010_src0_startofpacket;                                            // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire         rsp_demux_010_src0_endofpacket;                                              // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire         rsp_demux_011_src0_valid;                                                    // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [95:0] rsp_demux_011_src0_data;                                                     // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire         rsp_demux_011_src0_ready;                                                    // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire  [13:0] rsp_demux_011_src0_channel;                                                  // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire         rsp_demux_011_src0_startofpacket;                                            // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire         rsp_demux_011_src0_endofpacket;                                              // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire         rsp_demux_012_src0_valid;                                                    // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [95:0] rsp_demux_012_src0_data;                                                     // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire         rsp_demux_012_src0_ready;                                                    // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire  [13:0] rsp_demux_012_src0_channel;                                                  // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire         rsp_demux_012_src0_startofpacket;                                            // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire         rsp_demux_012_src0_endofpacket;                                              // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire         rsp_demux_013_src0_valid;                                                    // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire  [95:0] rsp_demux_013_src0_data;                                                     // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire         rsp_demux_013_src0_ready;                                                    // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire  [13:0] rsp_demux_013_src0_channel;                                                  // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire         rsp_demux_013_src0_startofpacket;                                            // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire         rsp_demux_013_src0_endofpacket;                                              // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire  [13:0] cpu_0_instruction_master_limiter_cmd_valid_data;                             // cpu_0_instruction_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (18),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (18),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_0_data_master_translator (
		.clk                    (clk_0_clk_clk),                                                        //                       clk.clk
		.reset                  (cpu_0_reset_n_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address            (cpu_0_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_0_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_0_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_0_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_0_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_0_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_0_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_0_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_0_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_0_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_0_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_0_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_0_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (cpu_0_data_master_byteenable),                                         //                          .byteenable
		.av_read                (cpu_0_data_master_read),                                               //                          .read
		.av_readdata            (cpu_0_data_master_readdata),                                           //                          .readdata
		.av_write               (cpu_0_data_master_write),                                              //                          .write
		.av_writedata           (cpu_0_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (cpu_0_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                 //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                 //               (terminated)
		.av_chipselect          (1'b0),                                                                 //               (terminated)
		.av_readdatavalid       (),                                                                     //               (terminated)
		.av_lock                (1'b0),                                                                 //               (terminated)
		.uav_clken              (),                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                //               (terminated)
		.av_response            (),                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                      //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (18),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (18),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_0_instruction_master_translator (
		.clk                    (clk_0_clk_clk),                                                               //                       clk.clk
		.reset                  (cpu_0_reset_n_reset_bridge_in_reset_reset),                                   //                     reset.reset
		.uav_address            (cpu_0_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_0_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_0_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_0_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_0_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_0_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_0_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_0_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (cpu_0_instruction_master_read),                                               //                          .read
		.av_readdata            (cpu_0_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (cpu_0_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                        //               (terminated)
		.av_byteenable          (4'b1111),                                                                     //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_write               (1'b0),                                                                        //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                        //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.av_debugaccess         (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) epcs_flash_controller_0_epcs_control_port_translator (
		.clk                    (clk_0_clk_clk),                                                    //                      clk.clk
		.reset                  (cpu_0_reset_n_reset_bridge_in_reset_reset),                        //                    reset.reset
		.uav_address            (epcs_flash_controller_0_epcs_control_port_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (epcs_flash_controller_0_epcs_control_port_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (epcs_flash_controller_0_epcs_control_port_agent_m0_read),          //                         .read
		.uav_write              (epcs_flash_controller_0_epcs_control_port_agent_m0_write),         //                         .write
		.uav_waitrequest        (epcs_flash_controller_0_epcs_control_port_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (epcs_flash_controller_0_epcs_control_port_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (epcs_flash_controller_0_epcs_control_port_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (epcs_flash_controller_0_epcs_control_port_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (epcs_flash_controller_0_epcs_control_port_agent_m0_writedata),     //                         .writedata
		.uav_lock               (epcs_flash_controller_0_epcs_control_port_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (epcs_flash_controller_0_epcs_control_port_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (epcs_flash_controller_0_epcs_control_port_address),                //      avalon_anti_slave_0.address
		.av_write               (epcs_flash_controller_0_epcs_control_port_write),                  //                         .write
		.av_read                (epcs_flash_controller_0_epcs_control_port_read),                   //                         .read
		.av_readdata            (epcs_flash_controller_0_epcs_control_port_readdata),               //                         .readdata
		.av_writedata           (epcs_flash_controller_0_epcs_control_port_writedata),              //                         .writedata
		.av_chipselect          (epcs_flash_controller_0_epcs_control_port_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                                 //              (terminated)
		.av_burstcount          (),                                                                 //              (terminated)
		.av_byteenable          (),                                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                                             //              (terminated)
		.av_waitrequest         (1'b0),                                                             //              (terminated)
		.av_writebyteenable     (),                                                                 //              (terminated)
		.av_lock                (),                                                                 //              (terminated)
		.av_clken               (),                                                                 //              (terminated)
		.uav_clken              (1'b0),                                                             //              (terminated)
		.av_debugaccess         (),                                                                 //              (terminated)
		.av_outputenable        (),                                                                 //              (terminated)
		.uav_response           (),                                                                 //              (terminated)
		.av_response            (2'b00),                                                            //              (terminated)
		.uav_writeresponsevalid (),                                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cpu_0_jtag_debug_module_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (cpu_0_reset_n_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (cpu_0_jtag_debug_module_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (cpu_0_jtag_debug_module_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (cpu_0_jtag_debug_module_agent_m0_read),          //                         .read
		.uav_write              (cpu_0_jtag_debug_module_agent_m0_write),         //                         .write
		.uav_waitrequest        (cpu_0_jtag_debug_module_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (cpu_0_jtag_debug_module_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (cpu_0_jtag_debug_module_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (cpu_0_jtag_debug_module_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (cpu_0_jtag_debug_module_agent_m0_writedata),     //                         .writedata
		.uav_lock               (cpu_0_jtag_debug_module_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (cpu_0_jtag_debug_module_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (cpu_0_jtag_debug_module_address),                //      avalon_anti_slave_0.address
		.av_write               (cpu_0_jtag_debug_module_write),                  //                         .write
		.av_read                (cpu_0_jtag_debug_module_read),                   //                         .read
		.av_readdata            (cpu_0_jtag_debug_module_readdata),               //                         .readdata
		.av_writedata           (cpu_0_jtag_debug_module_writedata),              //                         .writedata
		.av_byteenable          (cpu_0_jtag_debug_module_byteenable),             //                         .byteenable
		.av_waitrequest         (cpu_0_jtag_debug_module_waitrequest),            //                         .waitrequest
		.av_debugaccess         (cpu_0_jtag_debug_module_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_0_s1_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (cpu_0_reset_n_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (onchip_memory2_0_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_0_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (onchip_memory2_0_s1_agent_m0_read),          //                         .read
		.uav_write              (onchip_memory2_0_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (onchip_memory2_0_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_0_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (onchip_memory2_0_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (onchip_memory2_0_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (onchip_memory2_0_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (onchip_memory2_0_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (onchip_memory2_0_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (onchip_memory2_0_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_0_s1_write),                  //                         .write
		.av_readdata            (onchip_memory2_0_s1_readdata),               //                         .readdata
		.av_writedata           (onchip_memory2_0_s1_writedata),              //                         .writedata
		.av_byteenable          (onchip_memory2_0_s1_byteenable),             //                         .byteenable
		.av_chipselect          (onchip_memory2_0_s1_chipselect),             //                         .chipselect
		.av_clken               (onchip_memory2_0_s1_clken),                  //                         .clken
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) uart_s1_translator (
		.clk                    (clk_0_clk_clk),                             //                      clk.clk
		.reset                  (cpu_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (uart_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (uart_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (uart_s1_agent_m0_read),                     //                         .read
		.uav_write              (uart_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest        (uart_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (uart_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (uart_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (uart_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (uart_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock               (uart_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (uart_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (uart_s1_address),                           //      avalon_anti_slave_0.address
		.av_write               (uart_s1_write),                             //                         .write
		.av_read                (uart_s1_read),                              //                         .read
		.av_readdata            (uart_s1_readdata),                          //                         .readdata
		.av_writedata           (uart_s1_writedata),                         //                         .writedata
		.av_begintransfer       (uart_s1_begintransfer),                     //                         .begintransfer
		.av_chipselect          (uart_s1_chipselect),                        //                         .chipselect
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_byteenable          (),                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                      //              (terminated)
		.av_waitrequest         (1'b0),                                      //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.av_clken               (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_addr_s1_translator (
		.clk                    (clk_0_clk_clk),                             //                      clk.clk
		.reset                  (cpu_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_addr_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (pio_addr_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (pio_addr_s1_agent_m0_read),                 //                         .read
		.uav_write              (pio_addr_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (pio_addr_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (pio_addr_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (pio_addr_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (pio_addr_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (pio_addr_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (pio_addr_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (pio_addr_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (pio_addr_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (pio_addr_s1_write),                         //                         .write
		.av_readdata            (pio_addr_s1_readdata),                      //                         .readdata
		.av_writedata           (pio_addr_s1_writedata),                     //                         .writedata
		.av_chipselect          (pio_addr_s1_chipselect),                    //                         .chipselect
		.av_read                (),                                          //              (terminated)
		.av_begintransfer       (),                                          //              (terminated)
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_byteenable          (),                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                      //              (terminated)
		.av_waitrequest         (1'b0),                                      //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.av_clken               (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_data_s1_translator (
		.clk                    (clk_0_clk_clk),                             //                      clk.clk
		.reset                  (cpu_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_data_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (pio_data_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (pio_data_s1_agent_m0_read),                 //                         .read
		.uav_write              (pio_data_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (pio_data_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (pio_data_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (pio_data_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (pio_data_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (pio_data_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (pio_data_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (pio_data_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (pio_data_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (pio_data_s1_write),                         //                         .write
		.av_readdata            (pio_data_s1_readdata),                      //                         .readdata
		.av_writedata           (pio_data_s1_writedata),                     //                         .writedata
		.av_chipselect          (pio_data_s1_chipselect),                    //                         .chipselect
		.av_read                (),                                          //              (terminated)
		.av_begintransfer       (),                                          //              (terminated)
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_byteenable          (),                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                      //              (terminated)
		.av_waitrequest         (1'b0),                                      //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.av_clken               (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_clk_s1_translator (
		.clk                    (clk_0_clk_clk),                             //                      clk.clk
		.reset                  (cpu_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_clk_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (pio_clk_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (pio_clk_s1_agent_m0_read),                  //                         .read
		.uav_write              (pio_clk_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (pio_clk_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (pio_clk_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (pio_clk_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (pio_clk_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (pio_clk_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (pio_clk_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (pio_clk_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (pio_clk_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (pio_clk_s1_write),                          //                         .write
		.av_readdata            (pio_clk_s1_readdata),                       //                         .readdata
		.av_writedata           (pio_clk_s1_writedata),                      //                         .writedata
		.av_chipselect          (pio_clk_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                          //              (terminated)
		.av_begintransfer       (),                                          //              (terminated)
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_byteenable          (),                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                      //              (terminated)
		.av_waitrequest         (1'b0),                                      //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.av_clken               (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_ctr_out_s1_translator (
		.clk                    (clk_0_clk_clk),                             //                      clk.clk
		.reset                  (cpu_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_ctr_out_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (pio_ctr_out_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (pio_ctr_out_s1_agent_m0_read),              //                         .read
		.uav_write              (pio_ctr_out_s1_agent_m0_write),             //                         .write
		.uav_waitrequest        (pio_ctr_out_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (pio_ctr_out_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (pio_ctr_out_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (pio_ctr_out_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (pio_ctr_out_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock               (pio_ctr_out_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (pio_ctr_out_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (pio_ctr_out_s1_address),                    //      avalon_anti_slave_0.address
		.av_write               (pio_ctr_out_s1_write),                      //                         .write
		.av_readdata            (pio_ctr_out_s1_readdata),                   //                         .readdata
		.av_writedata           (pio_ctr_out_s1_writedata),                  //                         .writedata
		.av_chipselect          (pio_ctr_out_s1_chipselect),                 //                         .chipselect
		.av_read                (),                                          //              (terminated)
		.av_begintransfer       (),                                          //              (terminated)
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_byteenable          (),                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                      //              (terminated)
		.av_waitrequest         (1'b0),                                      //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.av_clken               (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_reset_s1_translator (
		.clk                    (clk_0_clk_clk),                             //                      clk.clk
		.reset                  (cpu_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_reset_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (pio_reset_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (pio_reset_s1_agent_m0_read),                //                         .read
		.uav_write              (pio_reset_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (pio_reset_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (pio_reset_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (pio_reset_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (pio_reset_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (pio_reset_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (pio_reset_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (pio_reset_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (pio_reset_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (pio_reset_s1_write),                        //                         .write
		.av_readdata            (pio_reset_s1_readdata),                     //                         .readdata
		.av_writedata           (pio_reset_s1_writedata),                    //                         .writedata
		.av_chipselect          (pio_reset_s1_chipselect),                   //                         .chipselect
		.av_read                (),                                          //              (terminated)
		.av_begintransfer       (),                                          //              (terminated)
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_byteenable          (),                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                      //              (terminated)
		.av_waitrequest         (1'b0),                                      //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.av_clken               (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_spi_clk_s1_translator (
		.clk                    (clk_0_clk_clk),                             //                      clk.clk
		.reset                  (cpu_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_spi_clk_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (pio_spi_clk_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (pio_spi_clk_s1_agent_m0_read),              //                         .read
		.uav_write              (pio_spi_clk_s1_agent_m0_write),             //                         .write
		.uav_waitrequest        (pio_spi_clk_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (pio_spi_clk_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (pio_spi_clk_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (pio_spi_clk_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (pio_spi_clk_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock               (pio_spi_clk_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (pio_spi_clk_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (pio_spi_clk_s1_address),                    //      avalon_anti_slave_0.address
		.av_write               (pio_spi_clk_s1_write),                      //                         .write
		.av_readdata            (pio_spi_clk_s1_readdata),                   //                         .readdata
		.av_writedata           (pio_spi_clk_s1_writedata),                  //                         .writedata
		.av_chipselect          (pio_spi_clk_s1_chipselect),                 //                         .chipselect
		.av_read                (),                                          //              (terminated)
		.av_begintransfer       (),                                          //              (terminated)
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_byteenable          (),                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                      //              (terminated)
		.av_waitrequest         (1'b0),                                      //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.av_clken               (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_spi_di_s1_translator (
		.clk                    (clk_0_clk_clk),                             //                      clk.clk
		.reset                  (cpu_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_spi_di_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (pio_spi_di_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (pio_spi_di_s1_agent_m0_read),               //                         .read
		.uav_write              (pio_spi_di_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (pio_spi_di_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (pio_spi_di_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (pio_spi_di_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (pio_spi_di_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (pio_spi_di_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (pio_spi_di_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (pio_spi_di_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (pio_spi_di_s1_address),                     //      avalon_anti_slave_0.address
		.av_readdata            (pio_spi_di_s1_readdata),                    //                         .readdata
		.av_write               (),                                          //              (terminated)
		.av_read                (),                                          //              (terminated)
		.av_writedata           (),                                          //              (terminated)
		.av_begintransfer       (),                                          //              (terminated)
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_byteenable          (),                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                      //              (terminated)
		.av_waitrequest         (1'b0),                                      //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.av_chipselect          (),                                          //              (terminated)
		.av_clken               (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_spi_do_s1_translator (
		.clk                    (clk_0_clk_clk),                             //                      clk.clk
		.reset                  (cpu_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_spi_do_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (pio_spi_do_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (pio_spi_do_s1_agent_m0_read),               //                         .read
		.uav_write              (pio_spi_do_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (pio_spi_do_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (pio_spi_do_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (pio_spi_do_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (pio_spi_do_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (pio_spi_do_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (pio_spi_do_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (pio_spi_do_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (pio_spi_do_s1_address),                     //      avalon_anti_slave_0.address
		.av_write               (pio_spi_do_s1_write),                       //                         .write
		.av_readdata            (pio_spi_do_s1_readdata),                    //                         .readdata
		.av_writedata           (pio_spi_do_s1_writedata),                   //                         .writedata
		.av_chipselect          (pio_spi_do_s1_chipselect),                  //                         .chipselect
		.av_read                (),                                          //              (terminated)
		.av_begintransfer       (),                                          //              (terminated)
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_byteenable          (),                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                      //              (terminated)
		.av_waitrequest         (1'b0),                                      //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.av_clken               (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_spi_le_s1_translator (
		.clk                    (clk_0_clk_clk),                             //                      clk.clk
		.reset                  (cpu_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_spi_le_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (pio_spi_le_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (pio_spi_le_s1_agent_m0_read),               //                         .read
		.uav_write              (pio_spi_le_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (pio_spi_le_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (pio_spi_le_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (pio_spi_le_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (pio_spi_le_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (pio_spi_le_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (pio_spi_le_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (pio_spi_le_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (pio_spi_le_s1_address),                     //      avalon_anti_slave_0.address
		.av_write               (pio_spi_le_s1_write),                       //                         .write
		.av_readdata            (pio_spi_le_s1_readdata),                    //                         .readdata
		.av_writedata           (pio_spi_le_s1_writedata),                   //                         .writedata
		.av_chipselect          (pio_spi_le_s1_chipselect),                  //                         .chipselect
		.av_read                (),                                          //              (terminated)
		.av_begintransfer       (),                                          //              (terminated)
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_byteenable          (),                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                      //              (terminated)
		.av_waitrequest         (1'b0),                                      //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.av_clken               (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) uart_0_s1_translator (
		.clk                    (clk_0_clk_clk),                             //                      clk.clk
		.reset                  (cpu_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (uart_0_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (uart_0_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (uart_0_s1_agent_m0_read),                   //                         .read
		.uav_write              (uart_0_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (uart_0_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (uart_0_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (uart_0_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (uart_0_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (uart_0_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (uart_0_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (uart_0_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (uart_0_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (uart_0_s1_write),                           //                         .write
		.av_read                (uart_0_s1_read),                            //                         .read
		.av_readdata            (uart_0_s1_readdata),                        //                         .readdata
		.av_writedata           (uart_0_s1_writedata),                       //                         .writedata
		.av_begintransfer       (uart_0_s1_begintransfer),                   //                         .begintransfer
		.av_chipselect          (uart_0_s1_chipselect),                      //                         .chipselect
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_byteenable          (),                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                      //              (terminated)
		.av_waitrequest         (1'b0),                                      //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.av_clken               (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (95),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_QOS_H                 (74),
		.PKT_QOS_L                 (74),
		.PKT_DATA_SIDEBAND_H       (72),
		.PKT_DATA_SIDEBAND_L       (72),
		.PKT_ADDR_SIDEBAND_H       (71),
		.PKT_ADDR_SIDEBAND_L       (71),
		.PKT_BURST_TYPE_H          (70),
		.PKT_BURST_TYPE_L          (69),
		.PKT_CACHE_H               (90),
		.PKT_CACHE_L               (87),
		.PKT_THREAD_ID_H           (83),
		.PKT_THREAD_ID_L           (83),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_EXCLUSIVE       (59),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (79),
		.ST_DATA_W                 (96),
		.ST_CHANNEL_W              (14),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_0_data_master_agent (
		.clk                   (clk_0_clk_clk),                                                        //       clk.clk
		.reset                 (cpu_0_reset_n_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.av_address            (cpu_0_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_0_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_0_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_0_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_0_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_0_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_0_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_0_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_0_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_0_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_0_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_0_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_0_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_0_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_0_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_0_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                    //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                     //          .data
		.rp_channel            (rsp_mux_src_channel),                                                  //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                            //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                              //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                    //          .ready
		.av_response           (),                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                      // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (95),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_QOS_H                 (74),
		.PKT_QOS_L                 (74),
		.PKT_DATA_SIDEBAND_H       (72),
		.PKT_DATA_SIDEBAND_L       (72),
		.PKT_ADDR_SIDEBAND_H       (71),
		.PKT_ADDR_SIDEBAND_L       (71),
		.PKT_BURST_TYPE_H          (70),
		.PKT_BURST_TYPE_L          (69),
		.PKT_CACHE_H               (90),
		.PKT_CACHE_L               (87),
		.PKT_THREAD_ID_H           (83),
		.PKT_THREAD_ID_L           (83),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_EXCLUSIVE       (59),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (79),
		.ST_DATA_W                 (96),
		.ST_CHANNEL_W              (14),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_0_instruction_master_agent (
		.clk                   (clk_0_clk_clk),                                                               //       clk.clk
		.reset                 (cpu_0_reset_n_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.av_address            (cpu_0_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_0_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_0_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_0_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_0_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_0_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_0_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_0_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_0_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_0_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_0_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_0_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_0_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_0_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_0_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_0_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_0_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (95),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (14),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) epcs_flash_controller_0_epcs_control_port_agent (
		.clk                     (clk_0_clk_clk),                                                              //             clk.clk
		.reset                   (cpu_0_reset_n_reset_bridge_in_reset_reset),                                  //       clk_reset.reset
		.m0_address              (epcs_flash_controller_0_epcs_control_port_agent_m0_address),                 //              m0.address
		.m0_burstcount           (epcs_flash_controller_0_epcs_control_port_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (epcs_flash_controller_0_epcs_control_port_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (epcs_flash_controller_0_epcs_control_port_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (epcs_flash_controller_0_epcs_control_port_agent_m0_lock),                    //                .lock
		.m0_readdata             (epcs_flash_controller_0_epcs_control_port_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (epcs_flash_controller_0_epcs_control_port_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (epcs_flash_controller_0_epcs_control_port_agent_m0_read),                    //                .read
		.m0_waitrequest          (epcs_flash_controller_0_epcs_control_port_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (epcs_flash_controller_0_epcs_control_port_agent_m0_writedata),               //                .writedata
		.m0_write                (epcs_flash_controller_0_epcs_control_port_agent_m0_write),                   //                .write
		.rp_endofpacket          (epcs_flash_controller_0_epcs_control_port_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (epcs_flash_controller_0_epcs_control_port_agent_rp_ready),                   //                .ready
		.rp_valid                (epcs_flash_controller_0_epcs_control_port_agent_rp_valid),                   //                .valid
		.rp_data                 (epcs_flash_controller_0_epcs_control_port_agent_rp_data),                    //                .data
		.rp_startofpacket        (epcs_flash_controller_0_epcs_control_port_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                                          //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                                          //                .valid
		.cp_data                 (cmd_mux_src_data),                                                           //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                                    //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                                        //                .channel
		.rf_sink_ready           (epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (epcs_flash_controller_0_epcs_control_port_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (epcs_flash_controller_0_epcs_control_port_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (epcs_flash_controller_0_epcs_control_port_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (epcs_flash_controller_0_epcs_control_port_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (epcs_flash_controller_0_epcs_control_port_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (epcs_flash_controller_0_epcs_control_port_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                              //       clk.clk
		.reset             (cpu_0_reset_n_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.in_data           (epcs_flash_controller_0_epcs_control_port_agent_rf_source_data),             //        in.data
		.in_valid          (epcs_flash_controller_0_epcs_control_port_agent_rf_source_valid),            //          .valid
		.in_ready          (epcs_flash_controller_0_epcs_control_port_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (epcs_flash_controller_0_epcs_control_port_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (epcs_flash_controller_0_epcs_control_port_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (epcs_flash_controller_0_epcs_control_port_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                      // (terminated)
		.csr_read          (1'b0),                                                                       // (terminated)
		.csr_write         (1'b0),                                                                       // (terminated)
		.csr_readdata      (),                                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                       // (terminated)
		.almost_full_data  (),                                                                           // (terminated)
		.almost_empty_data (),                                                                           // (terminated)
		.in_empty          (1'b0),                                                                       // (terminated)
		.out_empty         (),                                                                           // (terminated)
		.in_error          (1'b0),                                                                       // (terminated)
		.out_error         (),                                                                           // (terminated)
		.in_channel        (1'b0),                                                                       // (terminated)
		.out_channel       ()                                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (95),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (14),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_0_jtag_debug_module_agent (
		.clk                     (clk_0_clk_clk),                                            //             clk.clk
		.reset                   (cpu_0_reset_n_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (cpu_0_jtag_debug_module_agent_m0_address),                 //              m0.address
		.m0_burstcount           (cpu_0_jtag_debug_module_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (cpu_0_jtag_debug_module_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (cpu_0_jtag_debug_module_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (cpu_0_jtag_debug_module_agent_m0_lock),                    //                .lock
		.m0_readdata             (cpu_0_jtag_debug_module_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (cpu_0_jtag_debug_module_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (cpu_0_jtag_debug_module_agent_m0_read),                    //                .read
		.m0_waitrequest          (cpu_0_jtag_debug_module_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (cpu_0_jtag_debug_module_agent_m0_writedata),               //                .writedata
		.m0_write                (cpu_0_jtag_debug_module_agent_m0_write),                   //                .write
		.rp_endofpacket          (cpu_0_jtag_debug_module_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (cpu_0_jtag_debug_module_agent_rp_ready),                   //                .ready
		.rp_valid                (cpu_0_jtag_debug_module_agent_rp_valid),                   //                .valid
		.rp_data                 (cpu_0_jtag_debug_module_agent_rp_data),                    //                .data
		.rp_startofpacket        (cpu_0_jtag_debug_module_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                    //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                    //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                     //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                            //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                              //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                  //                .channel
		.rf_sink_ready           (cpu_0_jtag_debug_module_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (cpu_0_jtag_debug_module_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (cpu_0_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (cpu_0_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (cpu_0_jtag_debug_module_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (cpu_0_jtag_debug_module_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (cpu_0_jtag_debug_module_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (cpu_0_jtag_debug_module_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (cpu_0_jtag_debug_module_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (cpu_0_jtag_debug_module_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (cpu_0_jtag_debug_module_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (cpu_0_jtag_debug_module_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (cpu_0_jtag_debug_module_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (cpu_0_jtag_debug_module_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpu_0_jtag_debug_module_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (cpu_0_jtag_debug_module_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_0_jtag_debug_module_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (cpu_0_reset_n_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (cpu_0_jtag_debug_module_agent_rf_source_data),             //        in.data
		.in_valid          (cpu_0_jtag_debug_module_agent_rf_source_valid),            //          .valid
		.in_ready          (cpu_0_jtag_debug_module_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (cpu_0_jtag_debug_module_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (cpu_0_jtag_debug_module_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (cpu_0_jtag_debug_module_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (cpu_0_jtag_debug_module_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (cpu_0_jtag_debug_module_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (cpu_0_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (cpu_0_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (95),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (14),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) onchip_memory2_0_s1_agent (
		.clk                     (clk_0_clk_clk),                                        //             clk.clk
		.reset                   (cpu_0_reset_n_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (onchip_memory2_0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_memory2_0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_memory2_0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_memory2_0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_memory2_0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_memory2_0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_memory2_0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_memory2_0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_memory2_0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_memory2_0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_memory2_0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_memory2_0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_memory2_0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_memory2_0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_memory2_0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_memory2_0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                              //                .channel
		.rf_sink_ready           (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_memory2_0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_memory2_0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_memory2_0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (onchip_memory2_0_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_memory2_0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (cpu_0_reset_n_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (95),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (14),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) uart_s1_agent (
		.clk                     (clk_0_clk_clk),                             //             clk.clk
		.reset                   (cpu_0_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (uart_s1_agent_m0_address),                  //              m0.address
		.m0_burstcount           (uart_s1_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (uart_s1_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (uart_s1_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (uart_s1_agent_m0_lock),                     //                .lock
		.m0_readdata             (uart_s1_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (uart_s1_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (uart_s1_agent_m0_read),                     //                .read
		.m0_waitrequest          (uart_s1_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (uart_s1_agent_m0_writedata),                //                .writedata
		.m0_write                (uart_s1_agent_m0_write),                    //                .write
		.rp_endofpacket          (uart_s1_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (uart_s1_agent_rp_ready),                    //                .ready
		.rp_valid                (uart_s1_agent_rp_valid),                    //                .valid
		.rp_data                 (uart_s1_agent_rp_data),                     //                .data
		.rp_startofpacket        (uart_s1_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                     //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                     //                .valid
		.cp_data                 (cmd_mux_003_src_data),                      //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),             //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),               //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                   //                .channel
		.rf_sink_ready           (uart_s1_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (uart_s1_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (uart_s1_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (uart_s1_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (uart_s1_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (uart_s1_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (uart_s1_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (uart_s1_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (uart_s1_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (uart_s1_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (uart_s1_agent_rdata_fifo_src_ready),        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (uart_s1_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_sink_data    (uart_s1_agent_rdata_fifo_src_data),         //                .data
		.rdata_fifo_src_ready    (uart_s1_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (uart_s1_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (uart_s1_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) uart_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                             //       clk.clk
		.reset             (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (uart_s1_agent_rf_source_data),              //        in.data
		.in_valid          (uart_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (uart_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (uart_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (uart_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (uart_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (uart_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (uart_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (uart_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (uart_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (95),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (14),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pio_addr_s1_agent (
		.clk                     (clk_0_clk_clk),                                //             clk.clk
		.reset                   (cpu_0_reset_n_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (pio_addr_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pio_addr_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pio_addr_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pio_addr_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pio_addr_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (pio_addr_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pio_addr_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pio_addr_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (pio_addr_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pio_addr_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (pio_addr_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (pio_addr_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pio_addr_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (pio_addr_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (pio_addr_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (pio_addr_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_004_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                      //                .channel
		.rf_sink_ready           (pio_addr_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pio_addr_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pio_addr_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pio_addr_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pio_addr_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pio_addr_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pio_addr_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pio_addr_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pio_addr_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pio_addr_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (pio_addr_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pio_addr_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (pio_addr_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (pio_addr_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_addr_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pio_addr_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_addr_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                //       clk.clk
		.reset             (cpu_0_reset_n_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (pio_addr_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pio_addr_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pio_addr_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pio_addr_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pio_addr_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pio_addr_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pio_addr_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pio_addr_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pio_addr_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pio_addr_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (95),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (14),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pio_data_s1_agent (
		.clk                     (clk_0_clk_clk),                                //             clk.clk
		.reset                   (cpu_0_reset_n_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (pio_data_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pio_data_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pio_data_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pio_data_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pio_data_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (pio_data_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pio_data_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pio_data_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (pio_data_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pio_data_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (pio_data_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (pio_data_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pio_data_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (pio_data_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (pio_data_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (pio_data_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_005_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                      //                .channel
		.rf_sink_ready           (pio_data_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pio_data_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pio_data_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pio_data_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pio_data_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pio_data_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pio_data_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pio_data_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pio_data_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pio_data_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (pio_data_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pio_data_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (pio_data_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (pio_data_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_data_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pio_data_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_data_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                //       clk.clk
		.reset             (cpu_0_reset_n_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (pio_data_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pio_data_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pio_data_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pio_data_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pio_data_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pio_data_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pio_data_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pio_data_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pio_data_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pio_data_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (95),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (14),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pio_clk_s1_agent (
		.clk                     (clk_0_clk_clk),                               //             clk.clk
		.reset                   (cpu_0_reset_n_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (pio_clk_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pio_clk_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pio_clk_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pio_clk_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pio_clk_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (pio_clk_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pio_clk_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pio_clk_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (pio_clk_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pio_clk_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (pio_clk_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (pio_clk_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pio_clk_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (pio_clk_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (pio_clk_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (pio_clk_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                       //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                       //                .valid
		.cp_data                 (cmd_mux_006_src_data),                        //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),               //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                 //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                     //                .channel
		.rf_sink_ready           (pio_clk_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pio_clk_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pio_clk_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pio_clk_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pio_clk_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pio_clk_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pio_clk_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pio_clk_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pio_clk_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pio_clk_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (pio_clk_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pio_clk_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (pio_clk_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (pio_clk_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_clk_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pio_clk_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_clk_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                               //       clk.clk
		.reset             (cpu_0_reset_n_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (pio_clk_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pio_clk_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pio_clk_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pio_clk_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pio_clk_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pio_clk_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pio_clk_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pio_clk_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pio_clk_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pio_clk_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (95),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (14),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pio_ctr_out_s1_agent (
		.clk                     (clk_0_clk_clk),                                   //             clk.clk
		.reset                   (cpu_0_reset_n_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (pio_ctr_out_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pio_ctr_out_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pio_ctr_out_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pio_ctr_out_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pio_ctr_out_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (pio_ctr_out_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pio_ctr_out_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pio_ctr_out_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (pio_ctr_out_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pio_ctr_out_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (pio_ctr_out_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (pio_ctr_out_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pio_ctr_out_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (pio_ctr_out_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (pio_ctr_out_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (pio_ctr_out_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_007_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                         //                .channel
		.rf_sink_ready           (pio_ctr_out_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pio_ctr_out_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pio_ctr_out_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pio_ctr_out_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pio_ctr_out_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pio_ctr_out_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pio_ctr_out_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pio_ctr_out_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pio_ctr_out_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pio_ctr_out_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (pio_ctr_out_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pio_ctr_out_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (pio_ctr_out_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (pio_ctr_out_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_ctr_out_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pio_ctr_out_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_ctr_out_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (cpu_0_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (pio_ctr_out_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pio_ctr_out_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pio_ctr_out_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pio_ctr_out_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pio_ctr_out_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pio_ctr_out_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pio_ctr_out_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pio_ctr_out_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pio_ctr_out_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pio_ctr_out_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (95),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (14),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pio_reset_s1_agent (
		.clk                     (clk_0_clk_clk),                                 //             clk.clk
		.reset                   (cpu_0_reset_n_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (pio_reset_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pio_reset_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pio_reset_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pio_reset_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pio_reset_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (pio_reset_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pio_reset_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pio_reset_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (pio_reset_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pio_reset_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (pio_reset_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (pio_reset_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pio_reset_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (pio_reset_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (pio_reset_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (pio_reset_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_008_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                       //                .channel
		.rf_sink_ready           (pio_reset_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pio_reset_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pio_reset_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pio_reset_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pio_reset_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pio_reset_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pio_reset_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pio_reset_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pio_reset_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pio_reset_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (pio_reset_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pio_reset_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (pio_reset_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (pio_reset_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_reset_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pio_reset_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_reset_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (cpu_0_reset_n_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (pio_reset_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pio_reset_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pio_reset_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pio_reset_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pio_reset_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pio_reset_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pio_reset_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pio_reset_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pio_reset_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pio_reset_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (95),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (14),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pio_spi_clk_s1_agent (
		.clk                     (clk_0_clk_clk),                                   //             clk.clk
		.reset                   (cpu_0_reset_n_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (pio_spi_clk_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pio_spi_clk_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pio_spi_clk_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pio_spi_clk_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pio_spi_clk_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (pio_spi_clk_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pio_spi_clk_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pio_spi_clk_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (pio_spi_clk_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pio_spi_clk_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (pio_spi_clk_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (pio_spi_clk_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pio_spi_clk_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (pio_spi_clk_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (pio_spi_clk_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (pio_spi_clk_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_009_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                         //                .channel
		.rf_sink_ready           (pio_spi_clk_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pio_spi_clk_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pio_spi_clk_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pio_spi_clk_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pio_spi_clk_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pio_spi_clk_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pio_spi_clk_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pio_spi_clk_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pio_spi_clk_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pio_spi_clk_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (pio_spi_clk_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pio_spi_clk_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (pio_spi_clk_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (pio_spi_clk_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_spi_clk_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pio_spi_clk_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_spi_clk_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (cpu_0_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (pio_spi_clk_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pio_spi_clk_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pio_spi_clk_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pio_spi_clk_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pio_spi_clk_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pio_spi_clk_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pio_spi_clk_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pio_spi_clk_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pio_spi_clk_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pio_spi_clk_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (95),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (14),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pio_spi_di_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (cpu_0_reset_n_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (pio_spi_di_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pio_spi_di_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pio_spi_di_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pio_spi_di_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pio_spi_di_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (pio_spi_di_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pio_spi_di_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pio_spi_di_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (pio_spi_di_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pio_spi_di_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (pio_spi_di_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (pio_spi_di_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pio_spi_di_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (pio_spi_di_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (pio_spi_di_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (pio_spi_di_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_010_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                        //                .channel
		.rf_sink_ready           (pio_spi_di_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pio_spi_di_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pio_spi_di_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pio_spi_di_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pio_spi_di_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pio_spi_di_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pio_spi_di_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pio_spi_di_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pio_spi_di_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pio_spi_di_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (pio_spi_di_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pio_spi_di_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (pio_spi_di_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (pio_spi_di_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_spi_di_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pio_spi_di_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_spi_di_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (cpu_0_reset_n_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (pio_spi_di_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pio_spi_di_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pio_spi_di_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pio_spi_di_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pio_spi_di_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pio_spi_di_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pio_spi_di_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pio_spi_di_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pio_spi_di_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pio_spi_di_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (95),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (14),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pio_spi_do_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (cpu_0_reset_n_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (pio_spi_do_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pio_spi_do_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pio_spi_do_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pio_spi_do_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pio_spi_do_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (pio_spi_do_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pio_spi_do_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pio_spi_do_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (pio_spi_do_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pio_spi_do_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (pio_spi_do_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (pio_spi_do_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pio_spi_do_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (pio_spi_do_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (pio_spi_do_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (pio_spi_do_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_011_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                        //                .channel
		.rf_sink_ready           (pio_spi_do_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pio_spi_do_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pio_spi_do_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pio_spi_do_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pio_spi_do_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pio_spi_do_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pio_spi_do_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pio_spi_do_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pio_spi_do_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pio_spi_do_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (pio_spi_do_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pio_spi_do_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (pio_spi_do_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (pio_spi_do_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_spi_do_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pio_spi_do_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_spi_do_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (cpu_0_reset_n_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (pio_spi_do_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pio_spi_do_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pio_spi_do_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pio_spi_do_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pio_spi_do_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pio_spi_do_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pio_spi_do_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pio_spi_do_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pio_spi_do_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pio_spi_do_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (95),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (14),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pio_spi_le_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (cpu_0_reset_n_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (pio_spi_le_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pio_spi_le_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pio_spi_le_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pio_spi_le_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pio_spi_le_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (pio_spi_le_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pio_spi_le_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pio_spi_le_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (pio_spi_le_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pio_spi_le_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (pio_spi_le_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (pio_spi_le_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pio_spi_le_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (pio_spi_le_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (pio_spi_le_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (pio_spi_le_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_012_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                        //                .channel
		.rf_sink_ready           (pio_spi_le_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pio_spi_le_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pio_spi_le_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pio_spi_le_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pio_spi_le_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pio_spi_le_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pio_spi_le_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pio_spi_le_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pio_spi_le_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pio_spi_le_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (pio_spi_le_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pio_spi_le_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (pio_spi_le_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (pio_spi_le_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_spi_le_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pio_spi_le_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_spi_le_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (cpu_0_reset_n_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (pio_spi_le_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pio_spi_le_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pio_spi_le_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pio_spi_le_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pio_spi_le_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pio_spi_le_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pio_spi_le_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pio_spi_le_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pio_spi_le_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pio_spi_le_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (95),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (79),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (14),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) uart_0_s1_agent (
		.clk                     (clk_0_clk_clk),                              //             clk.clk
		.reset                   (cpu_0_reset_n_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (uart_0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (uart_0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (uart_0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (uart_0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (uart_0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (uart_0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (uart_0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (uart_0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (uart_0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (uart_0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (uart_0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (uart_0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (uart_0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (uart_0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (uart_0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (uart_0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                      //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                      //                .valid
		.cp_data                 (cmd_mux_013_src_data),                       //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),              //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                    //                .channel
		.rf_sink_ready           (uart_0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (uart_0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (uart_0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (uart_0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (uart_0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (uart_0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (uart_0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (uart_0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (uart_0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (uart_0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (uart_0_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (uart_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (uart_0_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (uart_0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (uart_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (uart_0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) uart_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                              //       clk.clk
		.reset             (cpu_0_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (uart_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (uart_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (uart_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (uart_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (uart_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (uart_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (uart_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (uart_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (uart_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (uart_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	mcu_mm_interconnect_0_router router (
		.sink_ready         (cpu_0_data_master_agent_cp_ready),          //      sink.ready
		.sink_valid         (cpu_0_data_master_agent_cp_valid),          //          .valid
		.sink_data          (cpu_0_data_master_agent_cp_data),           //          .data
		.sink_startofpacket (cpu_0_data_master_agent_cp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (cpu_0_data_master_agent_cp_endofpacket),    //          .endofpacket
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                          //       src.ready
		.src_valid          (router_src_valid),                          //          .valid
		.src_data           (router_src_data),                           //          .data
		.src_channel        (router_src_channel),                        //          .channel
		.src_startofpacket  (router_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                     //          .endofpacket
	);

	mcu_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (cpu_0_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_0_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (cpu_0_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_0_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_0_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (cpu_0_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_001_src_ready),                            //       src.ready
		.src_valid          (router_001_src_valid),                            //          .valid
		.src_data           (router_001_src_data),                             //          .data
		.src_channel        (router_001_src_channel),                          //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                       //          .endofpacket
	);

	mcu_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (epcs_flash_controller_0_epcs_control_port_agent_rp_ready),         //      sink.ready
		.sink_valid         (epcs_flash_controller_0_epcs_control_port_agent_rp_valid),         //          .valid
		.sink_data          (epcs_flash_controller_0_epcs_control_port_agent_rp_data),          //          .data
		.sink_startofpacket (epcs_flash_controller_0_epcs_control_port_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (epcs_flash_controller_0_epcs_control_port_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (cpu_0_reset_n_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.src_ready          (router_002_src_ready),                                             //       src.ready
		.src_valid          (router_002_src_valid),                                             //          .valid
		.src_data           (router_002_src_data),                                              //          .data
		.src_channel        (router_002_src_channel),                                           //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                        //          .endofpacket
	);

	mcu_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (cpu_0_jtag_debug_module_agent_rp_ready),         //      sink.ready
		.sink_valid         (cpu_0_jtag_debug_module_agent_rp_valid),         //          .valid
		.sink_data          (cpu_0_jtag_debug_module_agent_rp_data),          //          .data
		.sink_startofpacket (cpu_0_jtag_debug_module_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_0_jtag_debug_module_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (cpu_0_reset_n_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_003_src_ready),                           //       src.ready
		.src_valid          (router_003_src_valid),                           //          .valid
		.src_data           (router_003_src_data),                            //          .data
		.src_channel        (router_003_src_channel),                         //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                      //          .endofpacket
	);

	mcu_mm_interconnect_0_router_002 router_004 (
		.sink_ready         (onchip_memory2_0_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (onchip_memory2_0_s1_agent_rp_valid),         //          .valid
		.sink_data          (onchip_memory2_0_s1_agent_rp_data),          //          .data
		.sink_startofpacket (onchip_memory2_0_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (onchip_memory2_0_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (cpu_0_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_004_src_ready),                       //       src.ready
		.src_valid          (router_004_src_valid),                       //          .valid
		.src_data           (router_004_src_data),                        //          .data
		.src_channel        (router_004_src_channel),                     //          .channel
		.src_startofpacket  (router_004_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                  //          .endofpacket
	);

	mcu_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (uart_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (uart_s1_agent_rp_valid),                    //          .valid
		.sink_data          (uart_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (uart_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (uart_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                      //       src.ready
		.src_valid          (router_005_src_valid),                      //          .valid
		.src_data           (router_005_src_data),                       //          .data
		.src_channel        (router_005_src_channel),                    //          .channel
		.src_startofpacket  (router_005_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                 //          .endofpacket
	);

	mcu_mm_interconnect_0_router_005 router_006 (
		.sink_ready         (pio_addr_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (pio_addr_s1_agent_rp_valid),                //          .valid
		.sink_data          (pio_addr_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (pio_addr_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (pio_addr_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                      //       src.ready
		.src_valid          (router_006_src_valid),                      //          .valid
		.src_data           (router_006_src_data),                       //          .data
		.src_channel        (router_006_src_channel),                    //          .channel
		.src_startofpacket  (router_006_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                 //          .endofpacket
	);

	mcu_mm_interconnect_0_router_005 router_007 (
		.sink_ready         (pio_data_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (pio_data_s1_agent_rp_valid),                //          .valid
		.sink_data          (pio_data_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (pio_data_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (pio_data_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                      //       src.ready
		.src_valid          (router_007_src_valid),                      //          .valid
		.src_data           (router_007_src_data),                       //          .data
		.src_channel        (router_007_src_channel),                    //          .channel
		.src_startofpacket  (router_007_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                 //          .endofpacket
	);

	mcu_mm_interconnect_0_router_005 router_008 (
		.sink_ready         (pio_clk_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (pio_clk_s1_agent_rp_valid),                 //          .valid
		.sink_data          (pio_clk_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (pio_clk_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (pio_clk_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                      //       src.ready
		.src_valid          (router_008_src_valid),                      //          .valid
		.src_data           (router_008_src_data),                       //          .data
		.src_channel        (router_008_src_channel),                    //          .channel
		.src_startofpacket  (router_008_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                 //          .endofpacket
	);

	mcu_mm_interconnect_0_router_005 router_009 (
		.sink_ready         (pio_ctr_out_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (pio_ctr_out_s1_agent_rp_valid),             //          .valid
		.sink_data          (pio_ctr_out_s1_agent_rp_data),              //          .data
		.sink_startofpacket (pio_ctr_out_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (pio_ctr_out_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                      //       src.ready
		.src_valid          (router_009_src_valid),                      //          .valid
		.src_data           (router_009_src_data),                       //          .data
		.src_channel        (router_009_src_channel),                    //          .channel
		.src_startofpacket  (router_009_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                 //          .endofpacket
	);

	mcu_mm_interconnect_0_router_005 router_010 (
		.sink_ready         (pio_reset_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (pio_reset_s1_agent_rp_valid),               //          .valid
		.sink_data          (pio_reset_s1_agent_rp_data),                //          .data
		.sink_startofpacket (pio_reset_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (pio_reset_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                      //       src.ready
		.src_valid          (router_010_src_valid),                      //          .valid
		.src_data           (router_010_src_data),                       //          .data
		.src_channel        (router_010_src_channel),                    //          .channel
		.src_startofpacket  (router_010_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                 //          .endofpacket
	);

	mcu_mm_interconnect_0_router_005 router_011 (
		.sink_ready         (pio_spi_clk_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (pio_spi_clk_s1_agent_rp_valid),             //          .valid
		.sink_data          (pio_spi_clk_s1_agent_rp_data),              //          .data
		.sink_startofpacket (pio_spi_clk_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (pio_spi_clk_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                      //       src.ready
		.src_valid          (router_011_src_valid),                      //          .valid
		.src_data           (router_011_src_data),                       //          .data
		.src_channel        (router_011_src_channel),                    //          .channel
		.src_startofpacket  (router_011_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                 //          .endofpacket
	);

	mcu_mm_interconnect_0_router_005 router_012 (
		.sink_ready         (pio_spi_di_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (pio_spi_di_s1_agent_rp_valid),              //          .valid
		.sink_data          (pio_spi_di_s1_agent_rp_data),               //          .data
		.sink_startofpacket (pio_spi_di_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (pio_spi_di_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                      //       src.ready
		.src_valid          (router_012_src_valid),                      //          .valid
		.src_data           (router_012_src_data),                       //          .data
		.src_channel        (router_012_src_channel),                    //          .channel
		.src_startofpacket  (router_012_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                 //          .endofpacket
	);

	mcu_mm_interconnect_0_router_005 router_013 (
		.sink_ready         (pio_spi_do_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (pio_spi_do_s1_agent_rp_valid),              //          .valid
		.sink_data          (pio_spi_do_s1_agent_rp_data),               //          .data
		.sink_startofpacket (pio_spi_do_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (pio_spi_do_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                      //       src.ready
		.src_valid          (router_013_src_valid),                      //          .valid
		.src_data           (router_013_src_data),                       //          .data
		.src_channel        (router_013_src_channel),                    //          .channel
		.src_startofpacket  (router_013_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                 //          .endofpacket
	);

	mcu_mm_interconnect_0_router_005 router_014 (
		.sink_ready         (pio_spi_le_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (pio_spi_le_s1_agent_rp_valid),              //          .valid
		.sink_data          (pio_spi_le_s1_agent_rp_data),               //          .data
		.sink_startofpacket (pio_spi_le_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (pio_spi_le_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                      //       src.ready
		.src_valid          (router_014_src_valid),                      //          .valid
		.src_data           (router_014_src_data),                       //          .data
		.src_channel        (router_014_src_channel),                    //          .channel
		.src_startofpacket  (router_014_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                 //          .endofpacket
	);

	mcu_mm_interconnect_0_router_005 router_015 (
		.sink_ready         (uart_0_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (uart_0_s1_agent_rp_valid),                  //          .valid
		.sink_data          (uart_0_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (uart_0_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (uart_0_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                      //       src.ready
		.src_valid          (router_015_src_valid),                      //          .valid
		.src_data           (router_015_src_data),                       //          .data
		.src_channel        (router_015_src_channel),                    //          .channel
		.src_startofpacket  (router_015_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                 //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (79),
		.PKT_SRC_ID_H              (78),
		.PKT_SRC_ID_L              (75),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (96),
		.ST_CHANNEL_W              (14),
		.VALID_WIDTH               (14),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.REORDER                   (0)
	) cpu_0_instruction_master_limiter (
		.clk                    (clk_0_clk_clk),                                          //       clk.clk
		.reset                  (cpu_0_reset_n_reset_bridge_in_reset_reset),              // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                   //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                   //          .valid
		.cmd_sink_data          (router_001_src_data),                                    //          .data
		.cmd_sink_channel       (router_001_src_channel),                                 //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                           //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                             //          .endofpacket
		.cmd_src_ready          (cpu_0_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_0_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_0_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_0_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_0_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                  //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                  //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                   //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                          //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                            //          .endofpacket
		.rsp_src_ready          (cpu_0_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_0_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_0_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_0_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_0_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_0_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_0_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	mcu_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (clk_0_clk_clk),                             //       clk.clk
		.reset               (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_src_ready),                          //      sink.ready
		.sink_channel        (router_src_channel),                        //          .channel
		.sink_data           (router_src_data),                           //          .data
		.sink_startofpacket  (router_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket    (router_src_endofpacket),                    //          .endofpacket
		.sink_valid          (router_src_valid),                          //          .valid
		.src0_ready          (cmd_demux_src0_ready),                      //      src0.ready
		.src0_valid          (cmd_demux_src0_valid),                      //          .valid
		.src0_data           (cmd_demux_src0_data),                       //          .data
		.src0_channel        (cmd_demux_src0_channel),                    //          .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                //          .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                      //      src1.ready
		.src1_valid          (cmd_demux_src1_valid),                      //          .valid
		.src1_data           (cmd_demux_src1_data),                       //          .data
		.src1_channel        (cmd_demux_src1_channel),                    //          .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                //          .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                      //      src2.ready
		.src2_valid          (cmd_demux_src2_valid),                      //          .valid
		.src2_data           (cmd_demux_src2_data),                       //          .data
		.src2_channel        (cmd_demux_src2_channel),                    //          .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),              //          .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                //          .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                      //      src3.ready
		.src3_valid          (cmd_demux_src3_valid),                      //          .valid
		.src3_data           (cmd_demux_src3_data),                       //          .data
		.src3_channel        (cmd_demux_src3_channel),                    //          .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),              //          .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                //          .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                      //      src4.ready
		.src4_valid          (cmd_demux_src4_valid),                      //          .valid
		.src4_data           (cmd_demux_src4_data),                       //          .data
		.src4_channel        (cmd_demux_src4_channel),                    //          .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),              //          .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                //          .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                      //      src5.ready
		.src5_valid          (cmd_demux_src5_valid),                      //          .valid
		.src5_data           (cmd_demux_src5_data),                       //          .data
		.src5_channel        (cmd_demux_src5_channel),                    //          .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),              //          .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                //          .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                      //      src6.ready
		.src6_valid          (cmd_demux_src6_valid),                      //          .valid
		.src6_data           (cmd_demux_src6_data),                       //          .data
		.src6_channel        (cmd_demux_src6_channel),                    //          .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),              //          .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                //          .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                      //      src7.ready
		.src7_valid          (cmd_demux_src7_valid),                      //          .valid
		.src7_data           (cmd_demux_src7_data),                       //          .data
		.src7_channel        (cmd_demux_src7_channel),                    //          .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),              //          .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                //          .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                      //      src8.ready
		.src8_valid          (cmd_demux_src8_valid),                      //          .valid
		.src8_data           (cmd_demux_src8_data),                       //          .data
		.src8_channel        (cmd_demux_src8_channel),                    //          .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),              //          .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                //          .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                      //      src9.ready
		.src9_valid          (cmd_demux_src9_valid),                      //          .valid
		.src9_data           (cmd_demux_src9_data),                       //          .data
		.src9_channel        (cmd_demux_src9_channel),                    //          .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),              //          .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                //          .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                     //     src10.ready
		.src10_valid         (cmd_demux_src10_valid),                     //          .valid
		.src10_data          (cmd_demux_src10_data),                      //          .data
		.src10_channel       (cmd_demux_src10_channel),                   //          .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),             //          .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),               //          .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                     //     src11.ready
		.src11_valid         (cmd_demux_src11_valid),                     //          .valid
		.src11_data          (cmd_demux_src11_data),                      //          .data
		.src11_channel       (cmd_demux_src11_channel),                   //          .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),             //          .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),               //          .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                     //     src12.ready
		.src12_valid         (cmd_demux_src12_valid),                     //          .valid
		.src12_data          (cmd_demux_src12_data),                      //          .data
		.src12_channel       (cmd_demux_src12_channel),                   //          .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),             //          .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),               //          .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                     //     src13.ready
		.src13_valid         (cmd_demux_src13_valid),                     //          .valid
		.src13_data          (cmd_demux_src13_data),                      //          .data
		.src13_channel       (cmd_demux_src13_channel),                   //          .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),             //          .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket)                //          .endofpacket
	);

	mcu_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                          //        clk.clk
		.reset              (cpu_0_reset_n_reset_bridge_in_reset_reset),              //  clk_reset.reset
		.sink_ready         (cpu_0_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (cpu_0_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (cpu_0_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (cpu_0_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (cpu_0_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (cpu_0_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                               //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                               //           .valid
		.src0_data          (cmd_demux_001_src0_data),                                //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                             //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                       //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                         //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                               //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                               //           .valid
		.src1_data          (cmd_demux_001_src1_data),                                //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                             //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                       //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                         //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                               //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                               //           .valid
		.src2_data          (cmd_demux_001_src2_data),                                //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                             //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                       //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket)                          //           .endofpacket
	);

	mcu_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                             //       clk.clk
		.reset               (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_src_valid),                         //          .valid
		.src_data            (cmd_mux_src_data),                          //          .data
		.src_channel         (cmd_mux_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                    //          .channel
		.sink0_data          (cmd_demux_src0_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                  //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                   //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)             //          .endofpacket
	);

	mcu_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                             //       clk.clk
		.reset               (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                     //          .valid
		.src_data            (cmd_mux_001_src_data),                      //          .data
		.src_channel         (cmd_mux_001_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                    //          .channel
		.sink0_data          (cmd_demux_src1_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                  //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                   //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)             //          .endofpacket
	);

	mcu_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                             //       clk.clk
		.reset               (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                     //          .valid
		.src_data            (cmd_mux_002_src_data),                      //          .data
		.src_channel         (cmd_mux_002_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                    //          .channel
		.sink0_data          (cmd_demux_src2_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                  //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                   //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)             //          .endofpacket
	);

	mcu_mm_interconnect_0_cmd_mux_003 cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                             //       clk.clk
		.reset               (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                     //          .valid
		.src_data            (cmd_mux_003_src_data),                      //          .data
		.src_channel         (cmd_mux_003_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                    //          .channel
		.sink0_data          (cmd_demux_src3_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                 //          .endofpacket
	);

	mcu_mm_interconnect_0_cmd_mux_003 cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                             //       clk.clk
		.reset               (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                     //          .valid
		.src_data            (cmd_mux_004_src_data),                      //          .data
		.src_channel         (cmd_mux_004_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                    //          .channel
		.sink0_data          (cmd_demux_src4_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                 //          .endofpacket
	);

	mcu_mm_interconnect_0_cmd_mux_003 cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                             //       clk.clk
		.reset               (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                     //          .valid
		.src_data            (cmd_mux_005_src_data),                      //          .data
		.src_channel         (cmd_mux_005_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                    //          .channel
		.sink0_data          (cmd_demux_src5_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                 //          .endofpacket
	);

	mcu_mm_interconnect_0_cmd_mux_003 cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                             //       clk.clk
		.reset               (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                     //          .valid
		.src_data            (cmd_mux_006_src_data),                      //          .data
		.src_channel         (cmd_mux_006_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                    //          .channel
		.sink0_data          (cmd_demux_src6_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                 //          .endofpacket
	);

	mcu_mm_interconnect_0_cmd_mux_003 cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                             //       clk.clk
		.reset               (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                     //          .valid
		.src_data            (cmd_mux_007_src_data),                      //          .data
		.src_channel         (cmd_mux_007_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                    //          .channel
		.sink0_data          (cmd_demux_src7_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                 //          .endofpacket
	);

	mcu_mm_interconnect_0_cmd_mux_003 cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                             //       clk.clk
		.reset               (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                     //          .valid
		.src_data            (cmd_mux_008_src_data),                      //          .data
		.src_channel         (cmd_mux_008_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                    //          .channel
		.sink0_data          (cmd_demux_src8_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)                 //          .endofpacket
	);

	mcu_mm_interconnect_0_cmd_mux_003 cmd_mux_009 (
		.clk                 (clk_0_clk_clk),                             //       clk.clk
		.reset               (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                     //          .valid
		.src_data            (cmd_mux_009_src_data),                      //          .data
		.src_channel         (cmd_mux_009_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                    //          .channel
		.sink0_data          (cmd_demux_src9_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)                 //          .endofpacket
	);

	mcu_mm_interconnect_0_cmd_mux_003 cmd_mux_010 (
		.clk                 (clk_0_clk_clk),                             //       clk.clk
		.reset               (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                     //          .valid
		.src_data            (cmd_mux_010_src_data),                      //          .data
		.src_channel         (cmd_mux_010_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                     //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                   //          .channel
		.sink0_data          (cmd_demux_src10_data),                      //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket)                //          .endofpacket
	);

	mcu_mm_interconnect_0_cmd_mux_003 cmd_mux_011 (
		.clk                 (clk_0_clk_clk),                             //       clk.clk
		.reset               (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                     //          .valid
		.src_data            (cmd_mux_011_src_data),                      //          .data
		.src_channel         (cmd_mux_011_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                     //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                   //          .channel
		.sink0_data          (cmd_demux_src11_data),                      //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket)                //          .endofpacket
	);

	mcu_mm_interconnect_0_cmd_mux_003 cmd_mux_012 (
		.clk                 (clk_0_clk_clk),                             //       clk.clk
		.reset               (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                     //          .valid
		.src_data            (cmd_mux_012_src_data),                      //          .data
		.src_channel         (cmd_mux_012_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                     //          .valid
		.sink0_channel       (cmd_demux_src12_channel),                   //          .channel
		.sink0_data          (cmd_demux_src12_data),                      //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket)                //          .endofpacket
	);

	mcu_mm_interconnect_0_cmd_mux_003 cmd_mux_013 (
		.clk                 (clk_0_clk_clk),                             //       clk.clk
		.reset               (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                     //          .valid
		.src_data            (cmd_mux_013_src_data),                      //          .data
		.src_channel         (cmd_mux_013_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                     //          .valid
		.sink0_channel       (cmd_demux_src13_channel),                   //          .channel
		.sink0_data          (cmd_demux_src13_data),                      //          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket)                //          .endofpacket
	);

	mcu_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                      //      sink.ready
		.sink_channel       (router_002_src_channel),                    //          .channel
		.sink_data          (router_002_src_data),                       //          .data
		.sink_startofpacket (router_002_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_002_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_src0_data),                       //          .data
		.src0_channel       (rsp_demux_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_src1_data),                       //          .data
		.src1_channel       (rsp_demux_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                 //          .endofpacket
	);

	mcu_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                      //      sink.ready
		.sink_channel       (router_003_src_channel),                    //          .channel
		.sink_data          (router_003_src_data),                       //          .data
		.sink_startofpacket (router_003_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_003_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_001_src0_data),                   //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),            //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                  //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                  //          .valid
		.src1_data          (rsp_demux_001_src1_data),                   //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),          //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)             //          .endofpacket
	);

	mcu_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                      //      sink.ready
		.sink_channel       (router_004_src_channel),                    //          .channel
		.sink_data          (router_004_src_data),                       //          .data
		.sink_startofpacket (router_004_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_004_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_002_src0_data),                   //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),            //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                  //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                  //          .valid
		.src1_data          (rsp_demux_002_src1_data),                   //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),          //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)             //          .endofpacket
	);

	mcu_mm_interconnect_0_rsp_demux_003 rsp_demux_003 (
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                      //      sink.ready
		.sink_channel       (router_005_src_channel),                    //          .channel
		.sink_data          (router_005_src_data),                       //          .data
		.sink_startofpacket (router_005_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_005_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_003_src0_data),                   //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)             //          .endofpacket
	);

	mcu_mm_interconnect_0_rsp_demux_003 rsp_demux_004 (
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                      //      sink.ready
		.sink_channel       (router_006_src_channel),                    //          .channel
		.sink_data          (router_006_src_data),                       //          .data
		.sink_startofpacket (router_006_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_006_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_004_src0_data),                   //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)             //          .endofpacket
	);

	mcu_mm_interconnect_0_rsp_demux_003 rsp_demux_005 (
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                      //      sink.ready
		.sink_channel       (router_007_src_channel),                    //          .channel
		.sink_data          (router_007_src_data),                       //          .data
		.sink_startofpacket (router_007_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_007_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_005_src0_data),                   //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)             //          .endofpacket
	);

	mcu_mm_interconnect_0_rsp_demux_003 rsp_demux_006 (
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                      //      sink.ready
		.sink_channel       (router_008_src_channel),                    //          .channel
		.sink_data          (router_008_src_data),                       //          .data
		.sink_startofpacket (router_008_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_008_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_006_src0_data),                   //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)             //          .endofpacket
	);

	mcu_mm_interconnect_0_rsp_demux_003 rsp_demux_007 (
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                      //      sink.ready
		.sink_channel       (router_009_src_channel),                    //          .channel
		.sink_data          (router_009_src_data),                       //          .data
		.sink_startofpacket (router_009_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_009_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_007_src0_data),                   //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)             //          .endofpacket
	);

	mcu_mm_interconnect_0_rsp_demux_003 rsp_demux_008 (
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                      //      sink.ready
		.sink_channel       (router_010_src_channel),                    //          .channel
		.sink_data          (router_010_src_data),                       //          .data
		.sink_startofpacket (router_010_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_010_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_008_src0_data),                   //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)             //          .endofpacket
	);

	mcu_mm_interconnect_0_rsp_demux_003 rsp_demux_009 (
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                      //      sink.ready
		.sink_channel       (router_011_src_channel),                    //          .channel
		.sink_data          (router_011_src_data),                       //          .data
		.sink_startofpacket (router_011_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_011_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_009_src0_data),                   //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)             //          .endofpacket
	);

	mcu_mm_interconnect_0_rsp_demux_003 rsp_demux_010 (
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                      //      sink.ready
		.sink_channel       (router_012_src_channel),                    //          .channel
		.sink_data          (router_012_src_data),                       //          .data
		.sink_startofpacket (router_012_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_012_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_010_src0_data),                   //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)             //          .endofpacket
	);

	mcu_mm_interconnect_0_rsp_demux_003 rsp_demux_011 (
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                      //      sink.ready
		.sink_channel       (router_013_src_channel),                    //          .channel
		.sink_data          (router_013_src_data),                       //          .data
		.sink_startofpacket (router_013_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_013_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_011_src0_data),                   //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)             //          .endofpacket
	);

	mcu_mm_interconnect_0_rsp_demux_003 rsp_demux_012 (
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                      //      sink.ready
		.sink_channel       (router_014_src_channel),                    //          .channel
		.sink_data          (router_014_src_data),                       //          .data
		.sink_startofpacket (router_014_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_014_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_012_src0_data),                   //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)             //          .endofpacket
	);

	mcu_mm_interconnect_0_rsp_demux_003 rsp_demux_013 (
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                      //      sink.ready
		.sink_channel       (router_015_src_channel),                    //          .channel
		.sink_data          (router_015_src_data),                       //          .data
		.sink_startofpacket (router_015_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_015_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_013_src0_data),                   //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)             //          .endofpacket
	);

	mcu_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (clk_0_clk_clk),                             //       clk.clk
		.reset                (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                         //       src.ready
		.src_valid            (rsp_mux_src_valid),                         //          .valid
		.src_data             (rsp_mux_src_data),                          //          .data
		.src_channel          (rsp_mux_src_channel),                       //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                 //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                   //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                      //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                      //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                    //          .channel
		.sink0_data           (rsp_demux_src0_data),                       //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),              //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                  //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                  //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                   //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),          //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),            //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                  //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                  //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                   //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),          //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),            //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                  //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                  //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                   //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),          //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),            //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                  //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                  //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                   //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),          //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),            //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                  //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                  //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                   //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),          //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),            //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                  //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                  //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                   //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),          //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),            //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                  //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                  //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                   //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),          //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),            //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                  //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                  //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                   //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),          //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),            //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                  //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                  //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                   //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),          //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),            //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                  //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                  //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                   //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),          //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),            //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                  //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                  //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                   //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),          //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),            //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                  //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                  //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                   //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),          //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),            //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                  //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                  //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                   //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),          //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket)             //          .endofpacket
	);

	mcu_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                             //       clk.clk
		.reset               (cpu_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                     //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                     //          .valid
		.src_data            (rsp_mux_001_src_data),                      //          .data
		.src_channel         (rsp_mux_001_src_channel),                   //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),               //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                      //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                      //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                    //          .channel
		.sink0_data          (rsp_demux_src1_data),                       //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                //          .endofpacket
		.sink1_ready         (rsp_demux_001_src1_ready),                  //     sink1.ready
		.sink1_valid         (rsp_demux_001_src1_valid),                  //          .valid
		.sink1_channel       (rsp_demux_001_src1_channel),                //          .channel
		.sink1_data          (rsp_demux_001_src1_data),                   //          .data
		.sink1_startofpacket (rsp_demux_001_src1_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src1_endofpacket),            //          .endofpacket
		.sink2_ready         (rsp_demux_002_src1_ready),                  //     sink2.ready
		.sink2_valid         (rsp_demux_002_src1_valid),                  //          .valid
		.sink2_channel       (rsp_demux_002_src1_channel),                //          .channel
		.sink2_data          (rsp_demux_002_src1_data),                   //          .data
		.sink2_startofpacket (rsp_demux_002_src1_startofpacket),          //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src1_endofpacket)             //          .endofpacket
	);

endmodule
